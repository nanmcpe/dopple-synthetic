{
  "address": "0x45C205dF8fF7b1c3DBbB5de019a4C0F920Bbdd4d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_dolly",
          "type": "address"
        },
        {
          "internalType": "contract IStdReference",
          "name": "_ref",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddSynthetic",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidated",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "syntheticAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "syntheticAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MintAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "syntheticAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RedeemAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveSynthetic",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCollateralRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralRatio",
          "type": "uint256"
        }
      ],
      "name": "SetCollateralRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldDevAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDevAddress",
          "type": "address"
        }
      ],
      "name": "SetDevAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidationRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationRatio",
          "type": "uint256"
        }
      ],
      "name": "SetLiquidationRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidatorRewardRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidatorRewardRatio",
          "type": "uint256"
        }
      ],
      "name": "SetLiquidatorRewardRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPlatfromFeeRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPlatfromFeeRatio",
          "type": "uint256"
        }
      ],
      "name": "SetPlatfromFeeRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRemainingToMinterRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRemainingToMinterRatio",
          "type": "uint256"
        }
      ],
      "name": "SetRemainingToMinterRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "_synthetic",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_addAmount",
          "type": "uint256"
        }
      ],
      "name": "addCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "_synthetic",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_addAmount",
          "type": "uint256"
        }
      ],
      "name": "addSynthetic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToPairs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bandOracle",
      "outputs": [
        {
          "internalType": "contract IStdReference",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Burnable",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "assetBacked",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetBackedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "willLiquidateAtPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "canMintRemainning",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "canWithdrawRemainning",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exchangeRateAtMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentExchangeRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dolly",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pairs",
          "type": "string"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "_synthetic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "getRewardFromLiquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pairs",
          "type": "string"
        }
      ],
      "name": "isSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "_synthetic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidatorRewardRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "_synthetic",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_backedAmount",
          "type": "uint256"
        }
      ],
      "name": "mintSynthetic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "pairsToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairsToQuote",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platfromFeeRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "_synthetic",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeemSynthetic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainingToMinterRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "_synthetic",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_removeBackedAmount",
          "type": "uint256"
        }
      ],
      "name": "removeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "_synthetic",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_removeAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLowerCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "_synthetic",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_removeAmount",
          "type": "uint256"
        }
      ],
      "name": "removeSynthetic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_syntheticAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_pairs",
          "type": "string"
        }
      ],
      "name": "setAddressToPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collateralRatio",
          "type": "uint256"
        }
      ],
      "name": "setCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "name": "setDevAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidationRatio",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidatorRewardRatio",
          "type": "uint256"
        }
      ],
      "name": "setLiquidatorRewardRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pairs",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_syntheticAddress",
          "type": "address"
        }
      ],
      "name": "setPairsToAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pairs",
          "type": "string"
        },
        {
          "internalType": "string[2]",
          "name": "baseAndQuote",
          "type": "string[2]"
        }
      ],
      "name": "setPairsToQuote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_platfromFeeRatio",
          "type": "uint256"
        }
      ],
      "name": "setPlatfromFeeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_remainingToMinterRatio",
          "type": "uint256"
        }
      ],
      "name": "setRemainingToMinterRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a46b8e94f77a12978b4c7c7be22693994788c755f9dd78ecd8651f043a24817",
  "receipt": {
    "to": null,
    "from": "0xad1F66Acea98733D63cd8FC522118e4014Cb3F79",
    "contractAddress": "0x45C205dF8fF7b1c3DBbB5de019a4C0F920Bbdd4d",
    "transactionIndex": 1,
    "gasUsed": "3337420",
    "logsBloom": "0x
    "blockHash": "0x587dad2789c5892c55eea823913ec725f953c0996631dd92379a45fb3075447c",
    "transactionHash": "0x4a46b8e94f77a12978b4c7c7be22693994788c755f9dd78ecd8651f043a24817",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 25174539,
        "transactionHash": "0x4a46b8e94f77a12978b4c7c7be22693994788c755f9dd78ecd8651f043a24817",
        "address": "0x45C205dF8fF7b1c3DBbB5de019a4C0F920Bbdd4d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ad1f66acea98733d63cd8fc522118e4014cb3f79"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x587dad2789c5892c55eea823913ec725f953c0996631dd92379a45fb3075447c"
      }
    ],
    "blockNumber": 25174539,
    "cumulativeGasUsed": "3392448",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2a49FF95c52Abb5d0302Bd59877B7CF32134f4E8",
    "0xDA7a001b254CD22e46d3eAB04d937489c93174C3"
  ],
  "solcInputHash": "c0c1dda3434612a87fa2573bb2034e7e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_dolly\",\"type\":\"address\"},{\"internalType\":\"contract IStdReference\",\"name\":\"_ref\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddSynthetic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidated\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"syntheticAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"syntheticAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"syntheticAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveSynthetic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"SetCollateralRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDevAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDevAddress\",\"type\":\"address\"}],\"name\":\"SetDevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationRatio\",\"type\":\"uint256\"}],\"name\":\"SetLiquidationRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidatorRewardRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidatorRewardRatio\",\"type\":\"uint256\"}],\"name\":\"SetLiquidatorRewardRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPlatfromFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPlatfromFeeRatio\",\"type\":\"uint256\"}],\"name\":\"SetPlatfromFeeRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRemainingToMinterRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRemainingToMinterRatio\",\"type\":\"uint256\"}],\"name\":\"SetRemainingToMinterRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_synthetic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addAmount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_synthetic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addAmount\",\"type\":\"uint256\"}],\"name\":\"addSynthetic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToPairs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bandOracle\",\"outputs\":[{\"internalType\":\"contract IStdReference\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Burnable\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"assetBacked\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetBackedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"willLiquidateAtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canMintRemainning\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canWithdrawRemainning\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateAtMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentExchangeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dolly\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairs\",\"type\":\"string\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_synthetic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"getRewardFromLiquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairs\",\"type\":\"string\"}],\"name\":\"isSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_synthetic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidatorRewardRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_synthetic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_backedAmount\",\"type\":\"uint256\"}],\"name\":\"mintSynthetic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"pairsToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairsToQuote\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platfromFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_synthetic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemSynthetic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingToMinterRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_synthetic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_removeBackedAmount\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_synthetic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_removeAmount\",\"type\":\"uint256\"}],\"name\":\"removeLowerCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_synthetic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_removeAmount\",\"type\":\"uint256\"}],\"name\":\"removeSynthetic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_syntheticAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_pairs\",\"type\":\"string\"}],\"name\":\"setAddressToPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"}],\"name\":\"setCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationRatio\",\"type\":\"uint256\"}],\"name\":\"setLiquidationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidatorRewardRatio\",\"type\":\"uint256\"}],\"name\":\"setLiquidatorRewardRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairs\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_syntheticAddress\",\"type\":\"address\"}],\"name\":\"setPairsToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairs\",\"type\":\"string\"},{\"internalType\":\"string[2]\",\"name\":\"baseAndQuote\",\"type\":\"string[2]\"}],\"name\":\"setPairsToQuote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platfromFeeRatio\",\"type\":\"uint256\"}],\"name\":\"setPlatfromFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_remainingToMinterRatio\",\"type\":\"uint256\"}],\"name\":\"setRemainingToMinterRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Synthetic contract is the contract that minting systhetic asset by given amount of collateral Minter can mint, redeem (some or all all them), add more collateral (to avoid liquidation), remove some collateral (to withdraw the backed asset). If the ratio between collateral and synthetic value goes lower than liquidation ratio, anyone can call the liquidate function to get the reward and close that contract.\",\"kind\":\"dev\",\"methods\":{\"addCollateral(address,uint256)\":{\"details\":\"add more collateral for minted contract\",\"params\":{\"_addAmount\":\"amount of Dolly which want to add\",\"_synthetic\":\"the address of synthetic asset\"}},\"addSynthetic(address,uint256)\":{\"details\":\"if minter have a lot of collateral, minter can get more synthetic asset while the collateral ratio is sastisfy\",\"params\":{\"_addAmount\":\"the amount of synthetic asset that want to mint more.\",\"_synthetic\":\"the address of synthetic asset.\"}},\"constructor\":{\"details\":\"the constructor requires an address of Dolly and referrence of oracle Band Protocol\",\"params\":{\"_dolly\":\"smartcontract address of Dolly\",\"_ref\":\"referrence of oracle Band Protocol\"}},\"getRate(string)\":{\"details\":\"get current rate of given asset by Oracle\",\"params\":{\"_pairs\":\"the pairs of asset.\"}},\"getRewardFromLiquidate(address,address)\":{\"details\":\"for simulate all relevant amount of liqiodation\",\"params\":{\"_minter\":\"an address of minter.\",\"_synthetic\":\"a contract address of synthetic asset.\"}},\"isSupported(string)\":{\"details\":\"using for get supported asset before do the operation.\",\"params\":{\"_pairs\":\"the string of pairs e.g. \\\"TSLA/USD\\\"\"}},\"liquidate(address,address)\":{\"details\":\"liquidator must approve Synthetic asset to spending Dolly\",\"params\":{\"_minter\":\"address of minter.\",\"_synthetic\":\"the address of synthetic asset.\"}},\"mintSynthetic(address,uint256,uint256)\":{\"details\":\"user need to approve for deducting $DOLLY at Dolly contract first.\",\"params\":{\"_amount\":\"amount of synthetic that want to mint\",\"_backedAmount\":\"amount of Dolly that you want to collateral\",\"_synthetic\":\"name\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"for pause this smart contract to prevent mint, redeem, add collateral, remove collateral, liquidate process.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"redeemSynthetic(address,uint256)\":{\"details\":\"minter needs to approve for burn at SyntheticAsset before call this function.\",\"params\":{\"_amount\":\"amount of Dolly that you want to collateral\",\"_synthetic\":\"amount of synthetic that want to mint\"}},\"removeCollateral(address,uint256)\":{\"details\":\"remove some collateral for minted contract\",\"params\":{\"_removeBackedAmount\":\"amount of collateral which want to remove\",\"_synthetic\":\"the address of synthetic asset\"}},\"removeLowerCollateral(address,uint256)\":{\"details\":\"for testing purpose.\",\"params\":{\"_removeAmount\":\": amount of collateral which want to remove.\",\"_synthetic\":\": the address of synthetic asset.\"}},\"removeSynthetic(address,uint256)\":{\"details\":\"if minter have a lot of synthetic asset, minter can remove synthetic asset to increase the collateral ratio\",\"params\":{\"_removeAmount\":\": amount of synthetic asset that want to remove.\",\"_synthetic\":\": the address of synthetic asset.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAddressToPairs(address,string)\":{\"details\":\"map synthetic token address to string of pairs. Used for getRate() function\",\"params\":{\"_pairs\":\"string of pairs e.g. \\\"TSLA/USD\\\".\",\"_syntheticAddress\":\"address of synthetic asset.\"}},\"setCollateralRatio(uint256)\":{\"details\":\"set collateral ratio.\",\"params\":{\"_collateralRatio\":\": new collateral ratio.\"}},\"setDevAddress(address)\":{\"details\":\"set dev address to receive liquidation fee.\",\"params\":{\"_devAddress\":\"new developer address.\"}},\"setLiquidationRatio(uint256)\":{\"details\":\"set liquidation ratio.\",\"params\":{\"_liquidationRatio\":\"new liquidation ratio.\"}},\"setLiquidatorRewardRatio(uint256)\":{\"details\":\"set liquidator reward ratio.\",\"params\":{\"_liquidatorRewardRatio\":\"new liquidator reward ratio.\"}},\"setPairsToAddress(string,address)\":{\"details\":\"use this function to get the synthetic token address by given string pairs.\",\"params\":{\"_pairs\":\"string of pairs e.g. \\\"TSLA/USD\\\".\",\"_syntheticAddress\":\"address of synthetic asset.\"}},\"setPairsToQuote(string,string[2])\":{\"details\":\"set the pairs and quotes to calling the oracle.\",\"params\":{\"_pairs\":\"string of pairs e.g. \\\"TSLA/USD\\\".\",\"baseAndQuote\":\"2 elements array e.g. [\\\"TSLA\\\"][\\\"USD\\\"].\"}},\"setPlatfromFeeRatio(uint256)\":{\"details\":\"set platfrom fee ratio.\",\"params\":{\"_platfromFeeRatio\":\"new platfrom fee ratio.\"}},\"setRemainingToMinterRatio(uint256)\":{\"details\":\"set remaining of backed asset to minter ratio.\",\"params\":{\"_remainingToMinterRatio\":\"new remaining to minter ratio.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"for unpause this smart contract to prevent mint, redeem, add collateral, remove collateral, liquidate process.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRewardFromLiquidate(address,address)\":{\"notice\":\"both liquidate bot and this contract can call this function to estimate the profit.\"},\"removeLowerCollateral(address,uint256)\":{\"notice\":\"this function will remove some collateral to simulate under collateral and need to be liquidated in the future.\"}},\"notice\":\"the requirement of this contract are Contract address of Dolly (constuctor parameter). Contract address of referrence of orale Band protocol (constuctor parameter). Contract address of synthetic token contracts. Set the ownership of synthetic token contract (e.g. TSLA) to this contract. Set the pairsToQuote of supported synthetic asset (e.g. pairsToQuote[\\\"TSLA/USD\\\"] = [\\\"TSLA\\\", \\\"USD\\\"]). Set the pairsToAddress of supported synthetic asset (e.g. pairsToAddress[\\\"TSLA/USD\\\"] = 0x65cAC0F09EFdB88195a002E8DD4CBF6Ec9BC7f60). Set the pairsToAddress of supported synthetic asset (e.g. pairsToAddress[\\\"TSLA/USD\\\"] = 0x65cAC0F09EFdB88195a002E8DD4CBF6Ec9BC7f60). Set the addressToPairs of supported synthetic asset (e.g.) addressToPairs[0x65cAC0F09EFdB88195a002E8DD4CBF6Ec9BC7f60] = \\\"TSLA/USD\\\".\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Synthetic.sol\":\"Synthetic\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IStdReference.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IStdReference {\\n    /// A structure returned whenever someone requests for standard reference data.\\n    struct ReferenceData {\\n        uint256 rate; // base/quote exchange rate, multiplied by 1e18.\\n        uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\\n        uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\\n    }\\n\\n    /// Returns the price data for the given base/quote pair. Revert if not available.\\n    function getReferenceData(string memory _base, string memory _quote)\\n        external\\n        view\\n        returns (ReferenceData memory);\\n\\n    /// Similar to getReferenceData, but with multiple base/quote pairs at once.\\n    function getReferenceDataBulk(\\n        string[] memory _bases,\\n        string[] memory _quotes\\n    ) external view returns (ReferenceData[] memory);\\n}\\n\",\"keccak256\":\"0x10d9e0f01bfa68a499e914366ffa7856a98f87ed6fc12ad29c7b25a33cf9f515\",\"license\":\"MIT\"},\"contracts/Synthetic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"./token/ERC20/IERC20.sol\\\";\\nimport \\\"./token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./access/Ownable.sol\\\";\\nimport \\\"./utils/Pausable.sol\\\";\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./IStdReference.sol\\\";\\nimport \\\"./math/SafeMath.sol\\\";\\n\\n// @dev use this interface for burning systhetic asset.\\n// @notic burnFrom() need to call approve() before call this function.\\ninterface IERC20Burnable is IERC20 {\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function mint(address account, uint256 amount) external;\\n}\\n\\n/**\\n * @dev Synthetic contract is the contract that minting systhetic asset by given amount of collateral\\n * Minter can mint, redeem (some or all all them), add more collateral (to avoid liquidation),\\n * remove some collateral (to withdraw the backed asset). If the ratio between collateral and synthetic value\\n * goes lower than liquidation ratio, anyone can call the liquidate function to get the reward and close that contract.\\n * @notice the requirement of this contract are\\n * Contract address of Dolly (constuctor parameter).\\n * Contract address of referrence of orale Band protocol (constuctor parameter).\\n * Contract address of synthetic token contracts.\\n * Set the ownership of synthetic token contract (e.g. TSLA) to this contract.\\n * Set the pairsToQuote of supported synthetic asset (e.g. pairsToQuote[\\\"TSLA/USD\\\"] = [\\\"TSLA\\\", \\\"USD\\\"]).\\n * Set the pairsToAddress of supported synthetic asset (e.g. pairsToAddress[\\\"TSLA/USD\\\"] = 0x65cAC0F09EFdB88195a002E8DD4CBF6Ec9BC7f60).\\n * Set the pairsToAddress of supported synthetic asset (e.g. pairsToAddress[\\\"TSLA/USD\\\"] = 0x65cAC0F09EFdB88195a002E8DD4CBF6Ec9BC7f60).\\n * Set the addressToPairs of supported synthetic asset (e.g.) addressToPairs[0x65cAC0F09EFdB88195a002E8DD4CBF6Ec9BC7f60] = \\\"TSLA/USD\\\".\\n */\\ncontract Synthetic is Ownable, Pausable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public dolly;\\n    IStdReference public bandOracle;\\n\\n    mapping(string => string[2]) public pairsToQuote;\\n    mapping(string => address) public pairsToAddress;\\n    mapping(address => string) public addressToPairs;\\n\\n    uint256 public constant denominator = 1e18; // 1 scaled by 1e18\\n    uint256 public collateralRatio = 1e18 + 5e17; // 1.5 scaled by 1e18 (> 1.5 is good)\\n    uint256 public liquidationRatio = 1e18 + 25e16; // 1.25 scaled by 1e18\\n\\n    // allocation of liquidating gap between closing contract and remainning backedAsset\\n    uint256 public liquidatorRewardRatio = 5e16; // 0.05 scaled by 1e18\\n    uint256 public platfromFeeRatio = 5e16; // 0.05 scaled by 1e18\\n    uint256 public remainingToMinterRatio = 9e17; // 0.9 scaled by 1e18\\n    address public devAddress; // dev address to collect liquidation fee\\n\\n    // struct of minting the synthetic asset\\n    struct MintingNote {\\n        address minter; // address of minter\\n        IERC20Burnable asset; // synthetic asset address\\n        IERC20 assetBacked; // dolly address\\n        uint256 assetAmount; // amount of synthetic asset to be minted\\n        uint256 assetBackedAmount; // amount of Dolly\\n        uint256 currentRatio; // the current ratio between collateral value and minted systhetic value\\n        uint256 willLiquidateAtPrice; // the price that will liquidate this contract\\n        uint256 canMintRemainning; // amount of this synthetic asset that can be minted\\n        uint256 canWithdrawRemainning; // amount of Dolly that can be withdraw\\n        uint256 updatedAt;\\n        uint256 updatedBlock;\\n        uint256 exchangeRateAtMinted; // exchange rate at minted\\n        uint256 currentExchangeRate; // last exchage rate\\n    }\\n\\n    mapping(address => mapping(address => MintingNote)) public contracts; // minter => asset => MintingNote\\n\\n    event MintAsset(\\n        address minter,\\n        address indexed syntheticAddress,\\n        uint256 amount\\n    );\\n    event RedeemAsset(address indexed syntheticAddress, uint256 amount);\\n    event AddCollateral(address indexed user, uint256 amount);\\n    event RemoveCollateral(address indexed user, uint256 amount);\\n    event AddSynthetic(address indexed user, uint256 amount);\\n    event RemoveSynthetic(address indexed user, uint256 amount);\\n    event Liquidated(\\n        address indexed liquidated,\\n        address indexed liquidator,\\n        address indexed syntheticAddress,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    event SetDevAddress(address oldDevAddress, address newDevAddress);\\n    event SetCollateralRatio(\\n        uint256 oldCollateralRatio,\\n        uint256 newCollateralRatio\\n    );\\n    event SetLiquidationRatio(\\n        uint256 oldLiquidationRatio,\\n        uint256 newLiquidationRatio\\n    );\\n    event SetLiquidatorRewardRatio(\\n        uint256 oldLiquidatorRewardRatio,\\n        uint256 newLiquidatorRewardRatio\\n    );\\n    event SetPlatfromFeeRatio(\\n        uint256 oldPlatfromFeeRatio,\\n        uint256 newPlatfromFeeRatio\\n    );\\n    event SetRemainingToMinterRatio(\\n        uint256 oldRemainingToMinterRatio,\\n        uint256 newRemainingToMinterRatio\\n    );\\n\\n    /**\\n     * @dev the constructor requires an address of Dolly and referrence of oracle Band Protocol\\n     * @param _dolly smartcontract address of Dolly\\n     * @param _ref referrence of oracle Band Protocol\\n     */\\n    constructor(IERC20 _dolly, IStdReference _ref) public {\\n        dolly = _dolly; // use Dolly as collateral\\n        bandOracle = _ref;\\n        devAddress = _msgSender();\\n    }\\n\\n    /**\\n     * @dev user need to approve for deducting $DOLLY at Dolly contract first.\\n     * @param _synthetic name\\n     * @param _amount amount of synthetic that want to mint\\n     * @param _backedAmount amount of Dolly that you want to collateral\\n     */\\n    function mintSynthetic(\\n        IERC20Burnable _synthetic,\\n        uint256 _amount,\\n        uint256 _backedAmount\\n    ) external whenNotPaused nonReentrant {\\n        MintingNote storage mn = contracts[_msgSender()][address(_synthetic)];\\n\\n        uint256 exchangeRate = getRate(addressToPairs[address(_synthetic)]);\\n        uint256 assetBackedAtRateAmount = getProductOf(_amount, exchangeRate);\\n        uint256 requiredAmount =\\n            getProductOf(assetBackedAtRateAmount, collateralRatio);\\n        require(\\n            _backedAmount >= requiredAmount,\\n            \\\"Synthetic::mintSynthetic: under collateral\\\"\\n        );\\n        _synthetic.mint(_msgSender(), _amount);\\n        dolly.safeTransferFrom(_msgSender(), address(this), _backedAmount);\\n        mn.minter = _msgSender();\\n        mn.asset = _synthetic;\\n        mn.assetBacked = dolly;\\n        mn.assetAmount = _amount;\\n        mn.assetBackedAmount = _backedAmount;\\n        mn.exchangeRateAtMinted = exchangeRate;\\n        mn.currentExchangeRate = exchangeRate;\\n        mn.currentRatio = getRatioOf(_backedAmount, assetBackedAtRateAmount);\\n        mn.willLiquidateAtPrice = getWillLiquidateAtPrice(\\n            exchangeRate,\\n            mn.currentRatio\\n        );\\n        mn.canWithdrawRemainning = _backedAmount.sub(requiredAmount);\\n        mn.canMintRemainning = getRatioOf(\\n            mn.canWithdrawRemainning,\\n            assetBackedAtRateAmount\\n        );\\n        mn.updatedAt = block.timestamp;\\n        mn.updatedBlock = block.number;\\n        emit MintAsset(_msgSender(), address(_synthetic), _amount);\\n    }\\n\\n    /**\\n     * @dev minter needs to approve for burn at SyntheticAsset before call this function.\\n     * @param _synthetic amount of synthetic that want to mint\\n     * @param _amount amount of Dolly that you want to collateral\\n     */\\n    function redeemSynthetic(IERC20Burnable _synthetic, uint256 _amount)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        MintingNote storage mn = contracts[_msgSender()][address(_synthetic)];\\n        require(\\n            mn.assetAmount >= _amount,\\n            \\\"Synthetic::redeemSynthetic: amount exceeds collateral\\\"\\n        );\\n\\n        if (_amount == mn.assetAmount) {\\n            // redeem and exit\\n            _synthetic.burnFrom(_msgSender(), _amount);\\n            dolly.safeTransfer(_msgSender(), mn.assetBackedAmount);\\n            delete contracts[_msgSender()][address(_synthetic)];\\n            emit RedeemAsset(address(_synthetic), _amount);\\n        } else {\\n            // patial redeeming\\n            uint256 percent = getRatioOf(_amount, mn.assetAmount);\\n            uint256 assetToBeBurned = getProductOf(mn.assetAmount, percent);\\n            uint256 assetBackedToBeRedeemed =\\n                getProductOf(mn.assetBackedAmount, percent);\\n            uint256 exchangeRate = getRate(addressToPairs[address(_synthetic)]);\\n            uint256 assetBackedAmountAfterRedeem =\\n                mn.assetBackedAmount.sub(assetBackedToBeRedeemed);\\n\\n            uint256 assetRemainningAfterBurned =\\n                mn.assetAmount.sub(assetToBeBurned);\\n            uint256 assetBackedAtRateAmount =\\n                (assetRemainningAfterBurned.mul(exchangeRate)).div(denominator);\\n\\n            uint256 requiredAmount =\\n                (assetBackedAtRateAmount.mul(collateralRatio)).div(denominator);\\n            require(\\n                assetBackedAmountAfterRedeem >= requiredAmount,\\n                \\\"Synthetic::redeemSynthetic: under collateral ratio\\\"\\n            );\\n            _synthetic.burnFrom(_msgSender(), assetToBeBurned);\\n            dolly.safeTransfer(_msgSender(), assetBackedToBeRedeemed);\\n\\n            mn.assetAmount = assetRemainningAfterBurned;\\n            mn.assetBackedAmount = assetBackedAmountAfterRedeem;\\n            mn.currentRatio = getRatioOf(\\n                mn.assetBackedAmount,\\n                assetBackedAtRateAmount\\n            );\\n            mn.willLiquidateAtPrice = getWillLiquidateAtPrice(\\n                exchangeRate,\\n                mn.currentRatio\\n            );\\n            mn.canWithdrawRemainning = assetBackedAmountAfterRedeem.sub(\\n                requiredAmount\\n            );\\n            mn.canMintRemainning = getRatioOf(\\n                mn.canWithdrawRemainning,\\n                assetBackedAtRateAmount\\n            );\\n            mn.currentExchangeRate = exchangeRate;\\n            mn.updatedAt = block.timestamp;\\n            mn.updatedBlock = block.number;\\n            emit RedeemAsset(address(_synthetic), _amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev add more collateral for minted contract\\n     * @param _synthetic the address of synthetic asset\\n     * @param _addAmount amount of Dolly which want to add\\n     */\\n    function addCollateral(IERC20Burnable _synthetic, uint256 _addAmount)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        MintingNote storage mn = contracts[_msgSender()][address(_synthetic)];\\n        require(\\n            mn.assetAmount > 0,\\n            \\\"Synthetic::addCollateral: cannot add collateral to empty contract\\\"\\n        );\\n        mn.assetBackedAmount = mn.assetBackedAmount.add(_addAmount);\\n        uint256 exchangeRate = getRate(addressToPairs[address(_synthetic)]);\\n        uint256 assetBackedAtRateAmount =\\n            (mn.assetAmount.mul(exchangeRate)).div(denominator);\\n        uint256 requiredAmount =\\n            (assetBackedAtRateAmount.mul(collateralRatio)).div(denominator);\\n        dolly.safeTransferFrom(_msgSender(), address(this), _addAmount);\\n        mn.currentRatio = getRatioOf(\\n            mn.assetBackedAmount,\\n            assetBackedAtRateAmount\\n        );\\n        mn.willLiquidateAtPrice = getWillLiquidateAtPrice(\\n            exchangeRate,\\n            mn.currentRatio\\n        );\\n        mn.canWithdrawRemainning = mn.assetBackedAmount.sub(requiredAmount);\\n        mn.canMintRemainning = getRatioOf(\\n            mn.canWithdrawRemainning,\\n            assetBackedAtRateAmount\\n        );\\n        mn.currentExchangeRate = exchangeRate;\\n        mn.updatedAt = block.timestamp;\\n        mn.updatedBlock = block.number;\\n        emit AddCollateral(_msgSender(), _addAmount);\\n    }\\n\\n    /**\\n     * @dev remove some collateral for minted contract\\n     * @param _synthetic the address of synthetic asset\\n     * @param _removeBackedAmount amount of collateral which want to remove\\n     */\\n    function removeCollateral(\\n        IERC20Burnable _synthetic,\\n        uint256 _removeBackedAmount\\n    ) external whenNotPaused nonReentrant {\\n        MintingNote storage mn = contracts[_msgSender()][address(_synthetic)];\\n        require(\\n            mn.assetAmount > 0,\\n            \\\"Synthetic::removeCollateral: cannot remove collateral to empty contract\\\"\\n        );\\n        mn.assetBackedAmount = mn.assetBackedAmount.sub(_removeBackedAmount);\\n        uint256 exchangeRate = getRate(addressToPairs[address(_synthetic)]);\\n        uint256 assetBackedAtRateAmount =\\n            getProductOf(mn.assetAmount, exchangeRate);\\n        uint256 requiredAmount =\\n            getProductOf(assetBackedAtRateAmount, collateralRatio);\\n        uint256 canWithdrawRemainning =\\n            mn.assetBackedAmount.sub(requiredAmount);\\n        require(\\n            canWithdrawRemainning >= _removeBackedAmount,\\n            \\\"Synthetic::removeCollateral: amount exceeds required collateral\\\"\\n        );\\n        dolly.safeTransfer(_msgSender(), _removeBackedAmount);\\n        mn.currentRatio = getRatioOf(\\n            mn.assetBackedAmount,\\n            assetBackedAtRateAmount\\n        );\\n        mn.willLiquidateAtPrice = getWillLiquidateAtPrice(\\n            exchangeRate,\\n            mn.currentRatio\\n        );\\n        mn.canWithdrawRemainning = canWithdrawRemainning;\\n        mn.canMintRemainning = getRatioOf(\\n            canWithdrawRemainning,\\n            assetBackedAtRateAmount\\n        );\\n        mn.currentExchangeRate = exchangeRate;\\n        mn.updatedAt = block.timestamp;\\n        mn.updatedBlock = block.number;\\n        emit RemoveCollateral(_msgSender(), _removeBackedAmount);\\n    }\\n\\n    /**\\n     * @dev for testing purpose.\\n     * @notice this function will remove some collateral to simulate under collateral and need to be liquidated in the future.\\n     * @param _synthetic: the address of synthetic asset.\\n     * @param _removeAmount: amount of collateral which want to remove.\\n     */\\n    function removeLowerCollateral(\\n        IERC20Burnable _synthetic,\\n        uint256 _removeAmount\\n    ) external onlyOwner whenNotPaused nonReentrant {\\n        MintingNote storage mn = contracts[_msgSender()][address(_synthetic)];\\n        require(\\n            mn.assetAmount > 0,\\n            \\\"Synthetic::removeCollateral: cannot remove collateral to empty contract\\\"\\n        );\\n        mn.assetBackedAmount = mn.assetBackedAmount.sub(_removeAmount);\\n        uint256 exchangeRate = getRate(addressToPairs[address(_synthetic)]);\\n        uint256 assetBackedAtRateAmount =\\n            (mn.assetAmount.mul(exchangeRate)).div(denominator);\\n        dolly.safeTransfer(_msgSender(), _removeAmount);\\n        mn.currentRatio = getRatioOf(\\n            mn.assetBackedAmount,\\n            assetBackedAtRateAmount\\n        );\\n        mn.willLiquidateAtPrice = getWillLiquidateAtPrice(\\n            exchangeRate,\\n            mn.currentRatio\\n        );\\n        mn.canWithdrawRemainning = 0;\\n        mn.canMintRemainning = 0;\\n        mn.currentExchangeRate = exchangeRate;\\n        mn.updatedAt = block.timestamp;\\n        mn.updatedBlock = block.number;\\n        emit RemoveCollateral(_msgSender(), _removeAmount);\\n    }\\n\\n    /**\\n     * @dev if minter have a lot of collateral, minter can get more synthetic asset while the collateral ratio is sastisfy\\n     * @param _synthetic the address of synthetic asset.\\n     * @param _addAmount the amount of synthetic asset that want to mint more.\\n     */\\n    function addSynthetic(IERC20Burnable _synthetic, uint256 _addAmount)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        MintingNote storage mn = contracts[_msgSender()][address(_synthetic)];\\n        require(\\n            mn.assetAmount > 0,\\n            \\\"Synthetic::addCollateral: cannot add synthetic to empty contract\\\"\\n        );\\n        mn.assetAmount = mn.assetAmount.add(_addAmount);\\n        uint256 exchangeRate = getRate(addressToPairs[address(_synthetic)]);\\n        uint256 assetBackedAtRateAmount =\\n            getProductOf(mn.assetAmount, exchangeRate);\\n        uint256 requiredAmount =\\n            getProductOf(assetBackedAtRateAmount, collateralRatio);\\n        require(\\n            mn.assetBackedAmount > requiredAmount,\\n            \\\"Synthetic::addSynthetic: under collateral\\\"\\n        );\\n        _synthetic.mint(_msgSender(), _addAmount);\\n        mn.currentRatio = getRatioOf(\\n            mn.assetBackedAmount,\\n            assetBackedAtRateAmount\\n        );\\n        mn.willLiquidateAtPrice = getWillLiquidateAtPrice(\\n            exchangeRate,\\n            mn.currentRatio\\n        );\\n        mn.canWithdrawRemainning = mn.assetBackedAmount.sub(requiredAmount);\\n        mn.canMintRemainning = getRatioOf(\\n            mn.canWithdrawRemainning,\\n            assetBackedAtRateAmount\\n        );\\n        mn.currentExchangeRate = exchangeRate;\\n        mn.updatedAt = block.timestamp;\\n        mn.updatedBlock = block.number;\\n        emit AddSynthetic(_msgSender(), _addAmount);\\n    }\\n\\n    /**\\n     * @dev if minter have a lot of synthetic asset, minter can remove synthetic asset to increase the collateral ratio\\n     * @param _synthetic: the address of synthetic asset.\\n     * @param _removeAmount: amount of synthetic asset that want to remove.\\n     */\\n    function removeSynthetic(IERC20Burnable _synthetic, uint256 _removeAmount)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        MintingNote storage mn = contracts[_msgSender()][address(_synthetic)];\\n        require(\\n            mn.assetAmount > 0,\\n            \\\"Synthetic::removeSynthetic: cannot add synthetic to empty contract\\\"\\n        );\\n        mn.assetAmount = mn.assetAmount.sub(_removeAmount);\\n        uint256 exchangeRate = getRate(addressToPairs[address(_synthetic)]);\\n        uint256 assetBackedAtRateAmount =\\n            getProductOf(mn.assetAmount, exchangeRate);\\n        uint256 requiredAmount =\\n            getProductOf(assetBackedAtRateAmount, collateralRatio);\\n        _synthetic.burnFrom(_msgSender(), _removeAmount);\\n        mn.currentRatio = getRatioOf(\\n            mn.assetBackedAmount,\\n            assetBackedAtRateAmount\\n        );\\n        mn.willLiquidateAtPrice = getWillLiquidateAtPrice(\\n            exchangeRate,\\n            mn.currentRatio\\n        );\\n        mn.canWithdrawRemainning = mn.assetBackedAmount.sub(requiredAmount);\\n        mn.canMintRemainning = getRatioOf(\\n            mn.canWithdrawRemainning,\\n            assetBackedAtRateAmount\\n        );\\n        mn.currentExchangeRate = exchangeRate;\\n        mn.updatedAt = block.timestamp;\\n        mn.updatedBlock = block.number;\\n        emit RemoveSynthetic(_msgSender(), _removeAmount);\\n    }\\n\\n    /**\\n     * @dev liquidator must approve Synthetic asset to spending Dolly\\n     * @param _synthetic the address of synthetic asset.\\n     * @param _minter address of minter.\\n     */\\n    function liquidate(IERC20Burnable _synthetic, address _minter)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        (\\n            uint256 assetBackedAtRateAmount,\\n            uint256 remainingGapAmount,\\n            uint256 minterReceiveAmount,\\n            uint256 liquidatorReceiveAmount,\\n            uint256 platformReceiveAmount\\n        ) = getRewardFromLiquidate(_synthetic, _minter);\\n\\n        if (remainingGapAmount > 0) {\\n            // collateral ratio is between 1.0 - 1.25, so liquidator will get the reward.\\n            dolly.safeTransferFrom(\\n                _msgSender(),\\n                address(this),\\n                assetBackedAtRateAmount\\n            ); // deduct Doly from liquidator.\\n            dolly.safeTransfer(_minter, minterReceiveAmount); // transfer remainning to minter (90%).\\n            dolly.safeTransfer(\\n                _msgSender(),\\n                assetBackedAtRateAmount.add(liquidatorReceiveAmount)\\n            ); // transfer reward to to liquidator (5%) + original amount.\\n            dolly.safeTransfer(devAddress, platformReceiveAmount); // transfer liquidating fee to dev address (5%).\\n        } else {\\n            // collateral ratio is less than 1.0.\\n            dolly.safeTransferFrom(\\n                _msgSender(),\\n                address(this),\\n                assetBackedAtRateAmount\\n            ); // deduct Doly from liquidator.\\n        }\\n        delete contracts[_minter][address(_synthetic)];\\n    }\\n\\n    /**\\n     * @dev set the pairs and quotes to calling the oracle.\\n     * @param _pairs string of pairs e.g. \\\"TSLA/USD\\\".\\n     * @param baseAndQuote 2 elements array e.g. [\\\"TSLA\\\"][\\\"USD\\\"].\\n     */\\n    function setPairsToQuote(\\n        string memory _pairs,\\n        string[2] memory baseAndQuote\\n    ) external onlyOwner {\\n        pairsToQuote[_pairs] = baseAndQuote;\\n    }\\n\\n    /**\\n     * @dev use this function to get the synthetic token address by given string pairs.\\n     * @param _pairs string of pairs e.g. \\\"TSLA/USD\\\".\\n     * @param _syntheticAddress address of synthetic asset.\\n     */\\n    function setPairsToAddress(string memory _pairs, address _syntheticAddress)\\n        external\\n        onlyOwner\\n    {\\n        pairsToAddress[_pairs] = _syntheticAddress;\\n    }\\n\\n    /**\\n     * @dev map synthetic token address to string of pairs. Used for getRate() function\\n     * @param _pairs string of pairs e.g. \\\"TSLA/USD\\\".\\n     * @param _syntheticAddress address of synthetic asset.\\n     */\\n    function setAddressToPairs(address _syntheticAddress, string memory _pairs)\\n        external\\n        onlyOwner\\n    {\\n        addressToPairs[_syntheticAddress] = _pairs;\\n    }\\n\\n    /**\\n     * @dev set dev address to receive liquidation fee.\\n     * @param _devAddress new developer address.\\n     */\\n    function setDevAddress(address _devAddress) external onlyOwner {\\n        address oldDevAddress = devAddress;\\n        devAddress = _devAddress;\\n        emit SetDevAddress(oldDevAddress, _devAddress);\\n    }\\n\\n    /**\\n     * @dev set collateral ratio.\\n     * @param _collateralRatio: new collateral ratio.\\n     */\\n    function setCollateralRatio(uint256 _collateralRatio) external onlyOwner {\\n        uint256 oldCollateralRatio = collateralRatio;\\n        collateralRatio = _collateralRatio;\\n        emit SetCollateralRatio(oldCollateralRatio, _collateralRatio);\\n    }\\n\\n    /**\\n     * @dev set liquidation ratio.\\n     * @param _liquidationRatio new liquidation ratio.\\n     */\\n    function setLiquidationRatio(uint256 _liquidationRatio) external onlyOwner {\\n        uint256 oldLiquidationRatio = liquidationRatio;\\n        liquidationRatio = _liquidationRatio;\\n        emit SetLiquidationRatio(oldLiquidationRatio, _liquidationRatio);\\n    }\\n\\n    /**\\n     * @dev set liquidator reward ratio.\\n     * @param _liquidatorRewardRatio new liquidator reward ratio.\\n     */\\n    function setLiquidatorRewardRatio(uint256 _liquidatorRewardRatio)\\n        external\\n        onlyOwner\\n    {\\n        uint256 oldLiquidatorRewardRatio = liquidatorRewardRatio;\\n        liquidatorRewardRatio = _liquidatorRewardRatio;\\n        emit SetLiquidatorRewardRatio(\\n            oldLiquidatorRewardRatio,\\n            _liquidatorRewardRatio\\n        );\\n    }\\n\\n    /**\\n     * @dev set platfrom fee ratio.\\n     * @param _platfromFeeRatio new platfrom fee ratio.\\n     */\\n    function setPlatfromFeeRatio(uint256 _platfromFeeRatio) external onlyOwner {\\n        uint256 oldPlatfromFeeRatio = platfromFeeRatio;\\n        platfromFeeRatio = _platfromFeeRatio;\\n        emit SetPlatfromFeeRatio(oldPlatfromFeeRatio, _platfromFeeRatio);\\n    }\\n\\n    /**\\n     * @dev set remaining of backed asset to minter ratio.\\n     * @param _remainingToMinterRatio new remaining to minter ratio.\\n     */\\n    function setRemainingToMinterRatio(uint256 _remainingToMinterRatio)\\n        external\\n        onlyOwner\\n    {\\n        uint256 oldRemainingToMinterRatio = remainingToMinterRatio;\\n        remainingToMinterRatio = _remainingToMinterRatio;\\n        emit SetRemainingToMinterRatio(\\n            oldRemainingToMinterRatio,\\n            _remainingToMinterRatio\\n        );\\n    }\\n\\n    /**\\n     * @dev for simulate all relevant amount of liqiodation\\n     * @notice both liquidate bot and this contract can call this function to estimate the profit.\\n     * @param _synthetic a contract address of synthetic asset.\\n     * @param _minter an address of minter.\\n     */\\n    function getRewardFromLiquidate(IERC20Burnable _synthetic, address _minter)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        MintingNote storage mn = contracts[_minter][address(_synthetic)];\\n        require(\\n            mn.minter != address(0),\\n            \\\"Synthetic::liquidate: empty contract\\\"\\n        );\\n\\n        // if less than 1.25, will be liquidated\\n        require(\\n            mn.currentRatio < liquidationRatio,\\n            \\\"Synthetic::liquidate: ratio is sastisfy\\\"\\n        );\\n        uint256 exchangeRate = getRate(addressToPairs[address(_synthetic)]);\\n        require(\\n            mn.willLiquidateAtPrice < exchangeRate,\\n            \\\"Synthetic::liquidate: asset price is sastisfy\\\"\\n        );\\n\\n        uint256 assetBackedAtRateAmount =\\n            getProductOf(mn.assetAmount, exchangeRate);\\n\\n        uint256 remainingGapAmount;\\n        uint256 minterReceiveAmount;\\n        uint256 liquidatorReceiveAmount;\\n        uint256 platformReceiveAmount;\\n\\n        if (mn.assetBackedAmount > assetBackedAtRateAmount) {\\n            // liquidator will receive the reward because liquidation ratio is more than 1.0 (and less than 1.25)\\n            remainingGapAmount = mn.assetBackedAmount - assetBackedAtRateAmount; // no need to check overflow\\n            minterReceiveAmount = getProductOf(\\n                remainingGapAmount,\\n                remainingToMinterRatio\\n            );\\n\\n            liquidatorReceiveAmount = getProductOf(\\n                remainingGapAmount,\\n                liquidatorRewardRatio\\n            );\\n\\n            platformReceiveAmount = getProductOf(\\n                remainingGapAmount,\\n                platfromFeeRatio\\n            );\\n        }\\n        // ELSE\\n        // Too late to liquidate, liquidator need to pay extra amount because\\n        // the current collateral value is less than minted synthetic value (collateral ratio < 1)\\n        // to close this contract, liquidator must pay off 100% of collateral value\\n\\n        return (\\n            assetBackedAtRateAmount,\\n            remainingGapAmount,\\n            minterReceiveAmount,\\n            liquidatorReceiveAmount,\\n            platformReceiveAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev for pause this smart contract to prevent mint, redeem, add collateral, remove collateral, liquidate process.\\n     */\\n    function pause() external whenNotPaused onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev for unpause this smart contract to prevent mint, redeem, add collateral, remove collateral, liquidate process.\\n     */\\n    function unpause() external whenPaused onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev get current rate of given asset by Oracle\\n     * @param _pairs the pairs of asset.\\n     */\\n    function getRate(string memory _pairs) public view returns (uint256) {\\n        require(isSupported(_pairs));\\n        IStdReference.ReferenceData memory data =\\n            bandOracle.getReferenceData(\\n                pairsToQuote[_pairs][0],\\n                pairsToQuote[_pairs][1]\\n            );\\n        return data.rate;\\n    }\\n\\n    /**\\n     * @dev get liquidate price at current ratio\\n     * @param exchangeRate the current exchange rate\\n     * @param currentRatio the current ratio\\n     */\\n    function getWillLiquidateAtPrice(uint256 exchangeRate, uint256 currentRatio)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (exchangeRate.mul(currentRatio.sub(liquidationRatio - denominator)))\\n                .div(denominator);\\n    }\\n\\n    /**\\n     * @dev using for get supported asset before do the operation.\\n     * @param _pairs the string of pairs e.g. \\\"TSLA/USD\\\"\\n     */\\n    function isSupported(string memory _pairs) public view returns (bool) {\\n        return pairsToAddress[_pairs] != address(0);\\n    }\\n\\n    /**\\n     * @dev using for get supported asset before do the operation.\\n     * @notice this function cal calculate multi purposes e.g.\\n     * 1. get assetBackedAtRateAmount\\n     * 2. get requiredAmount\\n     * 3. get assetToBeBurned\\n     * 4. get assetBackedToBeRedeemed\\n     * @param _amount amount of base\\n     * @param _multiplier amount of multiplier\\n     */\\n    function getProductOf(uint256 _amount, uint256 _multiplier)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_amount.mul(_multiplier)).div(denominator);\\n    }\\n\\n    /**\\n     * @dev this function cal calculate multi purposes e.g.\\n     * @notice this function cal calculate multi purposes e.g.\\n     * 1. get currentRatio: current ratio between collateral and minted synthetic asset\\n     * 2. get canMintRemainning: the maximum amount of asset that can be minted depends on current collateral ratio.\\n     * 3. get percent: the percent of redeeming (in partial redeeming function).\\n     * @param _amount amount of base\\n     * @param _divider amount of divider\\n     */\\n    function getRatioOf(uint256 _amount, uint256 _divider)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            (((_amount.mul(denominator)).div(_divider)).mul(denominator)).div(\\n                denominator\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xcefeae8c7400e335d5c8929fadb1c5c19f6dd9d97c4ff0d0ff96969a224cb2b6\",\"license\":\"MIT\"},\"contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0x227616c4ac154f034691b9edb7fce08667cf059f0cd5a7a88064f791eb283c0c\",\"license\":\"MIT\"},\"contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x3aefc025791d973007a545b773c5669d1e0e520ea53883c6dc3789c9a7f0b791\",\"license\":\"MIT\"},\"contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x8e0302197c71b215fb117051ac0c0caf59cae89f00a9b835afadbbf07bf3a4b1\",\"license\":\"MIT\"},\"contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).sub(\\n                value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata =\\n            address(token).functionCall(\\n                data,\\n                \\\"SafeERC20: low-level call failed\\\"\\n            );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe6e16164f6ff48fa78b7600f36b83626e3a47892d4fdb7063c23e2922282d264\",\"license\":\"MIT\"},\"contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash =\\n            0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) =\\n            target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x17d17ecb13ef5b4fe30032a254a7678fd77ea5e53b40f21be3df90fa6b22b0fc\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf407d4288c4c8218d1f8f0ed37daca79f26875a84d88a9799cb5be9ee9642b61\",\"license\":\"MIT\"},\"contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x86a79b60265aabe55948a98c7d3e4ecac538d859d47898c823ae63730b6ef0d9\",\"license\":\"MIT\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x746da2d54f38744c15c5f4cb2d859d728560e7853139d54117a3260ff12e3a14\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c80638456cb591161013b578063b4eae1cb116100b8578063d2cd69611161007c578063d2cd696114610497578063d8ef0f91146104aa578063e150f647146104bd578063f2fde38b146104d0578063f3a014a2146104e35761023d565b8063b4eae1cb14610443578063bad826901461044b578063bf15c3e11461045e578063d0d41fe114610471578063d139b873146104845761023d565b8063946ce8cd116100ff578063946ce8cd146103fa578063956dcd1f1461040d57806396ce0795146104155780639a12944c1461041d578063b32ec546146104305761023d565b80638456cb59146103b157806384cd9b57146103b957806386b9d81f146103cc578063876467f8146103df5780638da5cb5b146103f25761023d565b80634e55b8a7116101c95780636c0daed81161018d5780636c0daed81461035d5780636d75b9ee14610370578063715018a6146103835780637bda6e281461038b5780638223c7701461039e5761023d565b80634e55b8a7146103125780635bcbdc961461031a5780635c975abb1461032d5780636060663e1461034257806365c3ad00146103555761023d565b806314057fca1161021057806314057fca146102ae5780631775765f146102da5780633ad10ef6146102e25780633f4ba83a146102ea5780633f97bc5b146102f25761023d565b8063095f1404146102425780630b87d86e146102605780630cff3c5f14610275578063123b089014610299575b600080fd5b61024a6104f6565b6040516102579190613658565b60405180910390f35b6102686104fc565b6040516102579190612f07565b610288610283366004612c45565b61050b565b60405161025795949392919061366f565b6102ac6102a7366004612e50565b6106c2565b005b6102c16102bc366004612b9f565b61073d565b6040516102579d9c9b9a99989796959493929190612f72565b61024a6107bd565b6102686107c3565b6102ac6107d2565b610305610300366004612dd0565b610835565b6040516102579190612feb565b61024a6108ec565b6102ac610328366004612d2e565b6108f2565b610335610957565b6040516102579190612fe0565b6102ac610350366004612e50565b610967565b61024a6109d6565b61024a61036b366004612cb6565b6109dc565b6102ac61037e366004612c57565b610ac7565b6102ac610d35565b6102ac610399366004612ce9565b610db4565b6102ac6103ac366004612bd7565b610e2d565b6102ac610e8b565b6102ac6103c7366004612e50565b610eed565b6102ac6103da366004612c45565b610f5c565b6102ac6103ed366004612c57565b6110e3565b61026861134d565b6102ac610408366004612e50565b61135c565b6102686113cb565b61024a6113da565b6102ac61042b366004612c82565b6113e6565b6102ac61043e366004612c57565b611673565b61024a611b19565b610268610459366004612cb6565b611b1f565b61030561046c366004612b83565b611b45565b6102ac61047f366004612b83565b611bad565b6102ac610492366004612c57565b611c35565b6102ac6104a5366004612e50565b611ea7565b6102ac6104b8366004612c57565b611f16565b6102ac6104cb366004612c57565b6121ab565b6102ac6104de366004612b83565b61240a565b6103356104f1366004612cb6565b6124c0565b60095481565b6002546001600160a01b031681565b6001600160a01b038082166000908152600d6020908152604080832086851684529091528120805491928392839283928392166105635760405162461bcd60e51b815260040161055a9061352e565b60405180910390fd5b6008548160050154106105885760405162461bcd60e51b815260040161055a9061321f565b6001600160a01b038816600090815260066020908152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352610630938301828280156106265780601f106105fb57610100808354040283529160200191610626565b820191906000526020600020905b81548152906001019060200180831161060957829003601f168201915b50505050506109dc565b9050808260060154106106555760405162461bcd60e51b815260040161055a9061307a565b60006106658360030154836124fe565b905060008060008084876004015411156106ad5784876004015403935061068e84600b546124fe565b925061069c846009546124fe565b91506106aa84600a546124fe565b90505b939d929c50909a509850909650945050505050565b6106ca61251f565b6000546001600160a01b039081169116146106f75760405162461bcd60e51b815260040161055a906133c2565b600b8054908290556040517f2e3ff2a57d8574a2f22d5c3e4f6d87795bb4311b40b959c0fdc5bce2d2075818906107319083908590613661565b60405180910390a15050565b600d602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0154600b8c0154600c909c01546001600160a01b039b8c169c9a8c169b9099169997989697959694959394929391929091908d565b60085481565b600c546001600160a01b031681565b6107da610957565b6107f65760405162461bcd60e51b815260040161055a9061304c565b6107fe61251f565b6000546001600160a01b0390811691161461082b5760405162461bcd60e51b815260040161055a906133c2565b610833612523565b565b81516020818401810180516004825292820191850191909120919052816002811061085c57fe5b01805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815294509192508301828280156108e45780601f106108b9576101008083540402835291602001916108e4565b820191906000526020600020905b8154815290600101906020018083116108c757829003601f168201915b505050505081565b600b5481565b6108fa61251f565b6000546001600160a01b039081169116146109275760405162461bcd60e51b815260040161055a906133c2565b806004836040516109389190612eeb565b9081526040519081900360200190206109529160026129b6565b505050565b600054600160a01b900460ff1690565b61096f61251f565b6000546001600160a01b0390811691161461099c5760405162461bcd60e51b815260040161055a906133c2565b60078054908290556040517fe21aac16189a7da506d3ccd8621d8639e3a32d51634174a427ebd25800884e99906107319083908590613661565b600a5481565b60006109e7826124c0565b6109f057600080fd5b6109f8612a06565b6003546040516001600160a01b03909116906365555bcc90600490610a1e908790612eeb565b908152604051908190036020019020600001600486604051610a409190612eeb565b9081526040519081900360200190206001016040518363ffffffff1660e01b8152600401610a6f92919061301e565b60606040518083038186803b158015610a8757600080fd5b505afa158015610a9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abf9190612e13565b519392505050565b610acf610957565b15610aec5760405162461bcd60e51b815260040161055a906131f5565b60026001541415610b0f5760405162461bcd60e51b815260040161055a90613572565b60026001556000600d81610b2161251f565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846001600160a01b03166001600160a01b0316815260200190815260200160002090506000816003015411610b8a5760405162461bcd60e51b815260040161055a9061318e565b6004810154610b999083612594565b60048201556001600160a01b038316600090815260066020908152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352610c11938301828280156106265780601f106105fb57610100808354040283529160200191610626565b90506000610c3e670de0b6b3a7640000610c388486600301546125b990919063ffffffff16565b906125f3565b90506000610c63670de0b6b3a7640000610c38600754856125b990919063ffffffff16565b9050610c84610c7061251f565b6002546001600160a01b0316903088612635565b610c92846004015483612693565b60058501819055610ca49084906126b7565b60068501556004840154610cb890826126ee565b60088501819055610cc99083612693565b6007850155600c840183905542600985015543600a850155610ce961251f565b6001600160a01b03167f2ac90482c3b6bea30a2c085cf093016bad7f970d91c5fd233e6b848d3e231dc386604051610d219190613658565b60405180910390a250506001805550505050565b610d3d61251f565b6000546001600160a01b03908116911614610d6a5760405162461bcd60e51b815260040161055a906133c2565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b610dbc61251f565b6000546001600160a01b03908116911614610de95760405162461bcd60e51b815260040161055a906133c2565b80600583604051610dfa9190612eeb565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555050565b610e3561251f565b6000546001600160a01b03908116911614610e625760405162461bcd60e51b815260040161055a906133c2565b6001600160a01b0382166000908152600660209081526040909120825161095292840190612a27565b610e93610957565b15610eb05760405162461bcd60e51b815260040161055a906131f5565b610eb861251f565b6000546001600160a01b03908116911614610ee55760405162461bcd60e51b815260040161055a906133c2565b610833612730565b610ef561251f565b6000546001600160a01b03908116911614610f225760405162461bcd60e51b815260040161055a906133c2565b60098054908290556040517f3ccaefdfe3295630104d687db5f7e07f2a19848b9f68c4f55a4ab591c9b5d90f906107319083908590613661565b610f64610957565b15610f815760405162461bcd60e51b815260040161055a906131f5565b60026001541415610fa45760405162461bcd60e51b815260040161055a90613572565b6002600155600080808080610fb9878761050b565b94509450945094509450600084111561103857610fd7610c7061251f565b600254610fee906001600160a01b03168785612791565b611016610ff961251f565b6110038785612594565b6002546001600160a01b03169190612791565b600c54600254611033916001600160a01b03918216911683612791565b611043565b611043610c7061251f565b5050506001600160a01b039283166000908152600d60209081526040808320969095168252949094525050812080546001600160a01b03199081168255600180830180548316905560028301805490921690915560038201839055600482018390556005820183905560068201839055600782018390556008820183905560098201839055600a8201839055600b8201839055600c909101919091558055565b6110eb610957565b156111085760405162461bcd60e51b815260040161055a906131f5565b6002600154141561112b5760405162461bcd60e51b815260040161055a90613572565b60026001556000600d8161113d61251f565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020905060008160030154116111a65760405162461bcd60e51b815260040161055a906133f7565b60048101546111b590836126ee565b60048201556001600160a01b038316600090815260066020908152604080832080548251601f6002600019610100600186161502019093169290920491820185900485028101850190935280835261122d938301828280156106265780601f106105fb57610100808354040283529160200191610626565b9050600061123f8360030154836124fe565b9050600061124f826007546124fe565b9050600061126a8286600401546126ee90919063ffffffff16565b90508581101561128c5760405162461bcd60e51b815260040161055a906135fb565b6112aa61129761251f565b6002546001600160a01b03169088612791565b6112b8856004015484612693565b600586018190556112ca9085906126b7565b6006860155600885018190556112e08184612693565b6007860155600c850184905542600986015543600a86015561130061251f565b6001600160a01b03167fe25410a4059619c9594dc6f022fe231b02aaea733f689e7ab0cd21b3d4d0eb54876040516113389190613658565b60405180910390a25050600180555050505050565b6000546001600160a01b031690565b61136461251f565b6000546001600160a01b039081169116146113915760405162461bcd60e51b815260040161055a906133c2565b60088054908290556040517fad82ab9177533366e9282d4fe3d9537bd1beaf004633ebab48e3ef4e47f258bd906107319083908590613661565b6003546001600160a01b031681565b670de0b6b3a764000081565b6113ee610957565b1561140b5760405162461bcd60e51b815260040161055a906131f5565b6002600154141561142e5760405162461bcd60e51b815260040161055a90613572565b60026001556000600d8161144061251f565b6001600160a01b0390811682526020808301939093526040918201600090812091881681529083528181206006845282822080548451601f6002600019610100600186161502019093169290920491820187900487028101870190955280855291955091936114d2939291908301828280156106265780601f106105fb57610100808354040283529160200191610626565b905060006114e085836124fe565b905060006114f0826007546124fe565b9050808510156115125760405162461bcd60e51b815260040161055a90613144565b866001600160a01b03166340c10f1961152961251f565b886040518363ffffffff1660e01b8152600401611547929190612f1b565b600060405180830381600087803b15801561156157600080fd5b505af1158015611575573d6000803e3d6000fd5b50505050611584610c7061251f565b61158c61251f565b84546001600160a01b03199081166001600160a01b0392831617865560018601805482168a84161790556002805490870180549190931691161790556003840186905560048401859055600b8401839055600c84018390556115ee8583612693565b600585018190556116009084906126b7565b600685015561160f85826126ee565b600885018190556116209083612693565b600785015542600985015543600a8501556001600160a01b0387167fd7918d04fa8d2763da038d81b4ab65ea7b9eb8e5e3b199c548142ac304a8ad6f61166461251f565b88604051611338929190612f1b565b61167b610957565b156116985760405162461bcd60e51b815260040161055a906131f5565b600260015414156116bb5760405162461bcd60e51b815260040161055a90613572565b60026001556000600d816116cd61251f565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020905081816003015410156117365760405162461bcd60e51b815260040161055a9061332c565b80600301548214156118ab57826001600160a01b03166379cc679061175961251f565b846040518363ffffffff1660e01b8152600401611777929190612f1b565b600060405180830381600087803b15801561179157600080fd5b505af11580156117a5573d6000803e3d6000fd5b505050506117cc6117b461251f565b60048301546002546001600160a01b03169190612791565b600d60006117d861251f565b6001600160a01b039081168252602080830193909352604091820160009081209187168082529190935281832080546001600160a01b0319908116825560018201805482169055600282018054909116905560038101849055600481018490556005810184905560068101849055600781018490556008810184905560098101849055600a8101849055600b8101849055600c0192909255517fb99b782c502642cbb60ce7d75f893727e5ef94003f2f9e56bcbbb013615e193e9061189e908590613658565b60405180910390a2611b10565b60006118bb838360030154612693565b905060006118cd8360030154836124fe565b905060006118df8460040154846124fe565b6001600160a01b038716600090815260066020908152604080832080548251601f6002600019610100600186161502019093169290920491820185900485028101850190935280835294955092936119599391928301828280156106265780601f106105fb57610100808354040283529160200191610626565b905060006119748387600401546126ee90919063ffffffff16565b9050600061198f8588600301546126ee90919063ffffffff16565b905060006119a9670de0b6b3a7640000610c3884876125b9565b905060006119ce670de0b6b3a7640000610c38600754856125b990919063ffffffff16565b9050808410156119f05760405162461bcd60e51b815260040161055a906135a9565b8a6001600160a01b03166379cc6790611a0761251f565b896040518363ffffffff1660e01b8152600401611a25929190612f1b565b600060405180830381600087803b158015611a3f57600080fd5b505af1158015611a53573d6000803e3d6000fd5b50505050611a6261129761251f565b6003890183905560048901849055611a7a8483612693565b60058a01819055611a8c9086906126b7565b60068a0155611a9b84826126ee565b60088a01819055611aac9083612693565b60078a0155600c89018590554260098a015543600a8a01556040516001600160a01b038c16907fb99b782c502642cbb60ce7d75f893727e5ef94003f2f9e56bcbbb013615e193e90611aff908d90613658565b60405180910390a250505050505050505b50506001805550565b60075481565b80516020818301810180516005825292820191909301209152546001600160a01b031681565b60066020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156108e45780601f106108b9576101008083540402835291602001916108e4565b611bb561251f565b6000546001600160a01b03908116911614611be25760405162461bcd60e51b815260040161055a906133c2565b600c80546001600160a01b038381166001600160a01b03198316179092556040519116907f618c54559e94f1499a808aad71ee8729f8e74e8c48e979616328ce493a1a52e7906107319083908590612f34565b611c3d610957565b15611c5a5760405162461bcd60e51b815260040161055a906131f5565b60026001541415611c7d5760405162461bcd60e51b815260040161055a90613572565b60026001556000600d81611c8f61251f565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846001600160a01b03166001600160a01b0316815260200190815260200160002090506000816003015411611cf85760405162461bcd60e51b815260040161055a90613266565b6003810154611d0790836126ee565b60038201556001600160a01b038316600090815260066020908152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352611d7f938301828280156106265780601f106105fb57610100808354040283529160200191610626565b90506000611d918360030154836124fe565b90506000611da1826007546124fe565b9050856001600160a01b03166379cc6790611dba61251f565b876040518363ffffffff1660e01b8152600401611dd8929190612f1b565b600060405180830381600087803b158015611df257600080fd5b505af1158015611e06573d6000803e3d6000fd5b50505050611e18846004015483612693565b60058501819055611e2a9084906126b7565b60068501556004840154611e3e90826126ee565b60088501819055611e4f9083612693565b6007850155600c840183905542600985015543600a850155611e6f61251f565b6001600160a01b03167f0cfc3db41d82b0cd638fa65ecb2b04df3a494abc01437f91896487f2a170900286604051610d219190613658565b611eaf61251f565b6000546001600160a01b03908116911614611edc5760405162461bcd60e51b815260040161055a906133c2565b600a8054908290556040517f6fe3d84266b6434a6a63810addd9a2075a300a5d5af2a48aba78e443e7eab3f9906107319083908590613661565b611f1e610957565b15611f3b5760405162461bcd60e51b815260040161055a906131f5565b60026001541415611f5e5760405162461bcd60e51b815260040161055a90613572565b60026001556000600d81611f7061251f565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846001600160a01b03166001600160a01b0316815260200190815260200160002090506000816003015411611fd95760405162461bcd60e51b815260040161055a906132ce565b6003810154611fe89083612594565b60038201556001600160a01b038316600090815260066020908152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352612060938301828280156106265780601f106105fb57610100808354040283529160200191610626565b905060006120728360030154836124fe565b90506000612082826007546124fe565b9050808460040154116120a75760405162461bcd60e51b815260040161055a90613464565b856001600160a01b03166340c10f196120be61251f565b876040518363ffffffff1660e01b81526004016120dc929190612f1b565b600060405180830381600087803b1580156120f657600080fd5b505af115801561210a573d6000803e3d6000fd5b5050505061211c846004015483612693565b6005850181905561212e9084906126b7565b6006850155600484015461214290826126ee565b600885018190556121539083612693565b6007850155600c840183905542600985015543600a85015561217361251f565b6001600160a01b03167f27306db1a5134fbc777edd5d395b7e6f2dd535800e7624e9d8f4b6d8d03451d986604051610d219190613658565b6121b361251f565b6000546001600160a01b039081169116146121e05760405162461bcd60e51b815260040161055a906133c2565b6121e8610957565b156122055760405162461bcd60e51b815260040161055a906131f5565b600260015414156122285760405162461bcd60e51b815260040161055a90613572565b60026001556000600d8161223a61251f565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020905060008160030154116122a35760405162461bcd60e51b815260040161055a906133f7565b60048101546122b290836126ee565b60048201556001600160a01b038316600090815260066020908152604080832080548251601f6002600019610100600186161502019093169290920491820185900485028101850190935280835261232a938301828280156106265780601f106105fb57610100808354040283529160200191610626565b90506000612351670de0b6b3a7640000610c388486600301546125b990919063ffffffff16565b905061237161235e61251f565b6002546001600160a01b03169086612791565b61237f836004015482612693565b600584018190556123919083906126b7565b60068401556000600884018190556007840155600c830182905542600984015543600a8401556123bf61251f565b6001600160a01b03167fe25410a4059619c9594dc6f022fe231b02aaea733f689e7ab0cd21b3d4d0eb54856040516123f79190613658565b60405180910390a2505060018055505050565b61241261251f565b6000546001600160a01b0390811691161461243f5760405162461bcd60e51b815260040161055a906133c2565b6001600160a01b0381166124655760405162461bcd60e51b815260040161055a906130c7565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806001600160a01b03166005836040516124dc9190612eeb565b908152604051908190036020019020546001600160a01b031614159050919050565b6000612516670de0b6b3a7640000610c3885856125b9565b90505b92915050565b3390565b61252b610957565b6125475760405162461bcd60e51b815260040161055a9061304c565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61257d61251f565b60405161258a9190612f07565b60405180910390a1565b6000828201838110156125165760405162461bcd60e51b815260040161055a9061310d565b6000826125c857506000612519565b828202828482816125d557fe5b04146125165760405162461bcd60e51b815260040161055a90613381565b600061251683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506127b0565b61268d846323b872dd60e01b85858560405160240161265693929190612f4e565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526127e7565b50505050565b6000612516670de0b6b3a7640000610c38816126b1868389846125b9565b906125b9565b6000612516670de0b6b3a7640000610c386126e7670de0b6b3a764000060085403866126ee90919063ffffffff16565b86906125b9565b600061251683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612876565b612738610957565b156127555760405162461bcd60e51b815260040161055a906131f5565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861257d61251f565b6109528363a9059cbb60e01b8484604051602401612656929190612f1b565b600081836127d15760405162461bcd60e51b815260040161055a9190612feb565b5060008385816127dd57fe5b0495945050505050565b606061283c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128a29092919063ffffffff16565b805190915015610952578080602001905181019061285a9190612c25565b6109525760405162461bcd60e51b815260040161055a906134e4565b6000818484111561289a5760405162461bcd60e51b815260040161055a9190612feb565b505050900390565b60606128b184846000856128b9565b949350505050565b60606128c48561297d565b6128e05760405162461bcd60e51b815260040161055a906134ad565b60006060866001600160a01b031685876040516128fd9190612eeb565b60006040518083038185875af1925050503d806000811461293a576040519150601f19603f3d011682016040523d82523d6000602084013e61293f565b606091505b509150915081156129535791506128b19050565b8051156129635780518082602001fd5b8360405162461bcd60e51b815260040161055a9190612feb565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906128b1575050151592915050565b82600281019282156129f6579160200282015b828111156129f657825180516129e6918491602090910190612a27565b50916020019190600101906129c9565b50612a02929150612aa1565b5090565b60405180606001604052806000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612a6857805160ff1916838001178555612a95565b82800160010185558215612a95579182015b82811115612a95578251825591602001919060010190612a7a565b50612a02929150612abe565b80821115612a02576000612ab58282612ad3565b50600101612aa1565b5b80821115612a025760008155600101612abf565b50805460018160011615610100020316600290046000825580601f10612af95750612b17565b601f016020900490600052602060002090810190612b179190612abe565b50565b600082601f830112612b2a578081fd5b813567ffffffffffffffff811115612b40578182fd5b612b53601f8201601f1916602001613692565b9150808252836020828501011115612b6a57600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215612b94578081fd5b8135612516816136f1565b60008060408385031215612bb1578081fd5b8235612bbc816136f1565b91506020830135612bcc816136f1565b809150509250929050565b60008060408385031215612be9578182fd5b8235612bf4816136f1565b9150602083013567ffffffffffffffff811115612c0f578182fd5b612c1b85828601612b1a565b9150509250929050565b600060208284031215612c36578081fd5b81518015158114612516578182fd5b60008060408385031215612bb1578182fd5b60008060408385031215612c69578182fd5b8235612c74816136f1565b946020939093013593505050565b600080600060608486031215612c96578081fd5b8335612ca1816136f1565b95602085013595506040909401359392505050565b600060208284031215612cc7578081fd5b813567ffffffffffffffff811115612cdd578182fd5b6128b184828501612b1a565b60008060408385031215612cfb578182fd5b823567ffffffffffffffff811115612d11578283fd5b612d1d85828601612b1a565b9250506020830135612bcc816136f1565b60008060408385031215612d40578182fd5b823567ffffffffffffffff80821115612d57578384fd5b612d6386838701612b1a565b9350602091508185013581811115612d79578384fd5b85019050601f81018613612d8b578283fd5b612d956040613692565b8082855b6002811015612dc157612daf8a83358701612b1a565b84529285019290850190600101612d99565b50959890975095505050505050565b60008060408385031215612de2578182fd5b823567ffffffffffffffff811115612df8578283fd5b612e0485828601612b1a565b95602094909401359450505050565b600060608284031215612e24578081fd5b612e2e6060613692565b8251815260208301516020820152604083015160408201528091505092915050565b600060208284031215612e61578081fd5b5035919050565b60008154600180821660008114612e865760018114612ea457612ee2565b60028304607f16865260ff1983166020870152604086019350612ee2565b60028304808752612eb4866136b9565b60005b82811015612ed85781546020828b0101528482019150602081019050612eb7565b8801602001955050505b50505092915050565b60008251612efd8184602087016136c5565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039d8e1681529b8d1660208d015299909b1660408b015260608a0197909752608089019590955260a088019390935260c087019190915260e08601526101008501526101208401526101408301526101608201929092526101808101919091526101a00190565b901515815260200190565b600060208252825180602084015261300a8160408501602087016136c5565b601f01601f19169190910160400192915050565b6000604082526130316040830185612e68565b82810360208401526130438185612e68565b95945050505050565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252602d908201527f53796e7468657469633a3a6c69717569646174653a206173736574207072696360408201526c6520697320736173746973667960981b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602a908201527f53796e7468657469633a3a6d696e7453796e7468657469633a20756e6465722060408201526918dbdb1b185d195c985b60b21b606082015260800190565b60208082526041908201527f53796e7468657469633a3a616464436f6c6c61746572616c3a2063616e6e6f7460408201527f2061646420636f6c6c61746572616c20746f20656d70747920636f6e747261636060820152601d60fa1b608082015260a00190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526027908201527f53796e7468657469633a3a6c69717569646174653a20726174696f20697320736040820152666173746973667960c81b606082015260800190565b60208082526042908201527f53796e7468657469633a3a72656d6f766553796e7468657469633a2063616e6e60408201527f6f74206164642073796e74686574696320746f20656d70747920636f6e74726160608201526118dd60f21b608082015260a00190565b602080825260409082018190527f53796e7468657469633a3a616464436f6c6c61746572616c3a2063616e6e6f74908201527f206164642073796e74686574696320746f20656d70747920636f6e7472616374606082015260800190565b60208082526035908201527f53796e7468657469633a3a72656465656d53796e7468657469633a20616d6f756040820152741b9d08195e18d959591cc818dbdb1b185d195c985b605a1b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526047908201527f53796e7468657469633a3a72656d6f7665436f6c6c61746572616c3a2063616e60408201527f6e6f742072656d6f766520636f6c6c61746572616c20746f20656d70747920636060820152661bdb9d1c9858dd60ca1b608082015260a00190565b60208082526029908201527f53796e7468657469633a3a61646453796e7468657469633a20756e64657220636040820152681bdb1b185d195c985b60ba1b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526024908201527f53796e7468657469633a3a6c69717569646174653a20656d70747920636f6e746040820152631c9858dd60e21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526032908201527f53796e7468657469633a3a72656465656d53796e7468657469633a20756e64656040820152717220636f6c6c61746572616c20726174696f60701b606082015260800190565b6020808252603f908201527f53796e7468657469633a3a72656d6f7665436f6c6c61746572616c3a20616d6f60408201527f756e74206578636565647320726571756972656420636f6c6c61746572616c00606082015260800190565b90815260200190565b918252602082015260400190565b948552602085019390935260408401919091526060830152608082015260a00190565b60405181810167ffffffffffffffff811182821017156136b157600080fd5b604052919050565b60009081526020902090565b60005b838110156136e05781810151838201526020016136c8565b8381111561268d5750506000910152565b6001600160a01b0381168114612b1757600080fdfea264697066735822122024a59228f4a75b975ce01db8aefc028c6135485ebfb8e9f21beb6dc2c9fd15e764736f6c634300060c0033",
  "devdoc": {
    "details": "Synthetic contract is the contract that minting systhetic asset by given amount of collateral Minter can mint, redeem (some or all all them), add more collateral (to avoid liquidation), remove some collateral (to withdraw the backed asset). If the ratio between collateral and synthetic value goes lower than liquidation ratio, anyone can call the liquidate function to get the reward and close that contract.",
    "kind": "dev",
    "methods": {
      "addCollateral(address,uint256)": {
        "details": "add more collateral for minted contract",
        "params": {
          "_addAmount": "amount of Dolly which want to add",
          "_synthetic": "the address of synthetic asset"
        }
      },
      "addSynthetic(address,uint256)": {
        "details": "if minter have a lot of collateral, minter can get more synthetic asset while the collateral ratio is sastisfy",
        "params": {
          "_addAmount": "the amount of synthetic asset that want to mint more.",
          "_synthetic": "the address of synthetic asset."
        }
      },
      "constructor": {
        "details": "the constructor requires an address of Dolly and referrence of oracle Band Protocol",
        "params": {
          "_dolly": "smartcontract address of Dolly",
          "_ref": "referrence of oracle Band Protocol"
        }
      },
      "getRate(string)": {
        "details": "get current rate of given asset by Oracle",
        "params": {
          "_pairs": "the pairs of asset."
        }
      },
      "getRewardFromLiquidate(address,address)": {
        "details": "for simulate all relevant amount of liqiodation",
        "params": {
          "_minter": "an address of minter.",
          "_synthetic": "a contract address of synthetic asset."
        }
      },
      "isSupported(string)": {
        "details": "using for get supported asset before do the operation.",
        "params": {
          "_pairs": "the string of pairs e.g. \"TSLA/USD\""
        }
      },
      "liquidate(address,address)": {
        "details": "liquidator must approve Synthetic asset to spending Dolly",
        "params": {
          "_minter": "address of minter.",
          "_synthetic": "the address of synthetic asset."
        }
      },
      "mintSynthetic(address,uint256,uint256)": {
        "details": "user need to approve for deducting $DOLLY at Dolly contract first.",
        "params": {
          "_amount": "amount of synthetic that want to mint",
          "_backedAmount": "amount of Dolly that you want to collateral",
          "_synthetic": "name"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "for pause this smart contract to prevent mint, redeem, add collateral, remove collateral, liquidate process."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "redeemSynthetic(address,uint256)": {
        "details": "minter needs to approve for burn at SyntheticAsset before call this function.",
        "params": {
          "_amount": "amount of Dolly that you want to collateral",
          "_synthetic": "amount of synthetic that want to mint"
        }
      },
      "removeCollateral(address,uint256)": {
        "details": "remove some collateral for minted contract",
        "params": {
          "_removeBackedAmount": "amount of collateral which want to remove",
          "_synthetic": "the address of synthetic asset"
        }
      },
      "removeLowerCollateral(address,uint256)": {
        "details": "for testing purpose.",
        "params": {
          "_removeAmount": ": amount of collateral which want to remove.",
          "_synthetic": ": the address of synthetic asset."
        }
      },
      "removeSynthetic(address,uint256)": {
        "details": "if minter have a lot of synthetic asset, minter can remove synthetic asset to increase the collateral ratio",
        "params": {
          "_removeAmount": ": amount of synthetic asset that want to remove.",
          "_synthetic": ": the address of synthetic asset."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAddressToPairs(address,string)": {
        "details": "map synthetic token address to string of pairs. Used for getRate() function",
        "params": {
          "_pairs": "string of pairs e.g. \"TSLA/USD\".",
          "_syntheticAddress": "address of synthetic asset."
        }
      },
      "setCollateralRatio(uint256)": {
        "details": "set collateral ratio.",
        "params": {
          "_collateralRatio": ": new collateral ratio."
        }
      },
      "setDevAddress(address)": {
        "details": "set dev address to receive liquidation fee.",
        "params": {
          "_devAddress": "new developer address."
        }
      },
      "setLiquidationRatio(uint256)": {
        "details": "set liquidation ratio.",
        "params": {
          "_liquidationRatio": "new liquidation ratio."
        }
      },
      "setLiquidatorRewardRatio(uint256)": {
        "details": "set liquidator reward ratio.",
        "params": {
          "_liquidatorRewardRatio": "new liquidator reward ratio."
        }
      },
      "setPairsToAddress(string,address)": {
        "details": "use this function to get the synthetic token address by given string pairs.",
        "params": {
          "_pairs": "string of pairs e.g. \"TSLA/USD\".",
          "_syntheticAddress": "address of synthetic asset."
        }
      },
      "setPairsToQuote(string,string[2])": {
        "details": "set the pairs and quotes to calling the oracle.",
        "params": {
          "_pairs": "string of pairs e.g. \"TSLA/USD\".",
          "baseAndQuote": "2 elements array e.g. [\"TSLA\"][\"USD\"]."
        }
      },
      "setPlatfromFeeRatio(uint256)": {
        "details": "set platfrom fee ratio.",
        "params": {
          "_platfromFeeRatio": "new platfrom fee ratio."
        }
      },
      "setRemainingToMinterRatio(uint256)": {
        "details": "set remaining of backed asset to minter ratio.",
        "params": {
          "_remainingToMinterRatio": "new remaining to minter ratio."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "for unpause this smart contract to prevent mint, redeem, add collateral, remove collateral, liquidate process."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getRewardFromLiquidate(address,address)": {
        "notice": "both liquidate bot and this contract can call this function to estimate the profit."
      },
      "removeLowerCollateral(address,uint256)": {
        "notice": "this function will remove some collateral to simulate under collateral and need to be liquidated in the future."
      }
    },
    "notice": "the requirement of this contract are Contract address of Dolly (constuctor parameter). Contract address of referrence of orale Band protocol (constuctor parameter). Contract address of synthetic token contracts. Set the ownership of synthetic token contract (e.g. TSLA) to this contract. Set the pairsToQuote of supported synthetic asset (e.g. pairsToQuote[\"TSLA/USD\"] = [\"TSLA\", \"USD\"]). Set the pairsToAddress of supported synthetic asset (e.g. pairsToAddress[\"TSLA/USD\"] = 0x65cAC0F09EFdB88195a002E8DD4CBF6Ec9BC7f60). Set the pairsToAddress of supported synthetic asset (e.g. pairsToAddress[\"TSLA/USD\"] = 0x65cAC0F09EFdB88195a002E8DD4CBF6Ec9BC7f60). Set the addressToPairs of supported synthetic asset (e.g.) addressToPairs[0x65cAC0F09EFdB88195a002E8DD4CBF6Ec9BC7f60] = \"TSLA/USD\".",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2417,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5351,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5549,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 498,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "dolly",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)4526"
      },
      {
        "astId": 500,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "bandOracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IStdReference)451"
      },
      {
        "astId": 506,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "pairsToQuote",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 510,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "pairsToAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 514,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "addressToPairs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 522,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "collateralRatio",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 527,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "liquidationRatio",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 530,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "liquidatorRewardRatio",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 533,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "platfromFeeRatio",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 536,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "remainingToMinterRatio",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 538,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "devAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 571,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "contracts",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(MintingNote)565_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)2_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)4526": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Burnable)483": {
        "encoding": "inplace",
        "label": "contract IERC20Burnable",
        "numberOfBytes": "20"
      },
      "t_contract(IStdReference)451": {
        "encoding": "inplace",
        "label": "contract IStdReference",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(MintingNote)565_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct Synthetic.MintingNote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(MintingNote)565_storage)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(MintingNote)565_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Synthetic.MintingNote)",
        "numberOfBytes": "32",
        "value": "t_struct(MintingNote)565_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_string_storage)2_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)2_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MintingNote)565_storage": {
        "encoding": "inplace",
        "label": "struct Synthetic.MintingNote",
        "members": [
          {
            "astId": 540,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "minter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 542,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "asset",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20Burnable)483"
          },
          {
            "astId": 544,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "assetBacked",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)4526"
          },
          {
            "astId": 546,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "assetAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 548,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "assetBackedAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 550,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "currentRatio",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 552,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "willLiquidateAtPrice",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 554,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "canMintRemainning",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 556,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "canWithdrawRemainning",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 558,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "updatedAt",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 560,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "updatedBlock",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 562,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "exchangeRateAtMinted",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 564,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "currentExchangeRate",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}