{
  "address": "0x66bA726B1eA2e08FAe440ad4E52836E03Cc1914b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_dolly",
          "type": "address"
        },
        {
          "internalType": "contract IStdReference",
          "name": "_ref",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidated",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "syntheticAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "syntheticAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MintAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "syntheticAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RedeemAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldDevAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDevAddress",
          "type": "address"
        }
      ],
      "name": "SetDevAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "_synthetic",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_addAmount",
          "type": "uint256"
        }
      ],
      "name": "addCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToPairs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bandOracle",
      "outputs": [
        {
          "internalType": "contract IStdReference",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Burnable",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "assetBacked",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetBackedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "willLiquidateAtPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "canMintRemainning",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "canWithdrawRemainning",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exchangeRateAtMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentExchangeRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dolly",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pairs",
          "type": "string"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pairs",
          "type": "string"
        }
      ],
      "name": "isSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "_synthetic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidatorRewardRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "_synthetic",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_backedAmount",
          "type": "uint256"
        }
      ],
      "name": "mintSynthetic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "pairsToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairsToQuote",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platfromFeeRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "_synthetic",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeemSynthetic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainingToMinterRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "_synthetic",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_removeBackedAmount",
          "type": "uint256"
        }
      ],
      "name": "removeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "_synthetic",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_removeAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLowerCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_syntheticAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_pairs",
          "type": "string"
        }
      ],
      "name": "setAddressToPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "name": "setDevAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pairs",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_syntheticAddress",
          "type": "address"
        }
      ],
      "name": "setPairsToAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pairs",
          "type": "string"
        },
        {
          "internalType": "string[2]",
          "name": "baseAndQuote",
          "type": "string[2]"
        }
      ],
      "name": "setPairsToQuote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "systheticAsset",
      "outputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Burnable",
          "name": "_synthetic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "viewRewardFromLiquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c5179e29b9bdaf6f2a40984985202777f32b91681d4d12888bdc1873165f805",
  "receipt": {
    "to": null,
    "from": "0xad1F66Acea98733D63cd8FC522118e4014Cb3F79",
    "contractAddress": "0x66bA726B1eA2e08FAe440ad4E52836E03Cc1914b",
    "transactionIndex": 2,
    "gasUsed": "3084392",
    "logsBloom": "0x
    "blockHash": "0x52a6113ef3f42d86f79870134aa1d13a2964d24bbc8a1b237fb3948d029ceba7",
    "transactionHash": "0x5c5179e29b9bdaf6f2a40984985202777f32b91681d4d12888bdc1873165f805",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 25092664,
        "transactionHash": "0x5c5179e29b9bdaf6f2a40984985202777f32b91681d4d12888bdc1873165f805",
        "address": "0x66bA726B1eA2e08FAe440ad4E52836E03Cc1914b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ad1f66acea98733d63cd8fc522118e4014cb3f79"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x52a6113ef3f42d86f79870134aa1d13a2964d24bbc8a1b237fb3948d029ceba7"
      }
    ],
    "blockNumber": 25092664,
    "cumulativeGasUsed": "3173199",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6E5F4b79fb26981654aF0a5eab086e575673C107",
    "0xDA7a001b254CD22e46d3eAB04d937489c93174C3"
  ],
  "solcInputHash": "f18e3a0f3f20bcd511d9cfc907a164e3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_dolly\",\"type\":\"address\"},{\"internalType\":\"contract IStdReference\",\"name\":\"_ref\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidated\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"syntheticAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"syntheticAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"syntheticAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDevAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDevAddress\",\"type\":\"address\"}],\"name\":\"SetDevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_synthetic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addAmount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToPairs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bandOracle\",\"outputs\":[{\"internalType\":\"contract IStdReference\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Burnable\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"assetBacked\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetBackedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"willLiquidateAtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canMintRemainning\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canWithdrawRemainning\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateAtMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentExchangeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dolly\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairs\",\"type\":\"string\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairs\",\"type\":\"string\"}],\"name\":\"isSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_synthetic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidatorRewardRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_synthetic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_backedAmount\",\"type\":\"uint256\"}],\"name\":\"mintSynthetic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"pairsToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairsToQuote\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platfromFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_synthetic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemSynthetic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingToMinterRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_synthetic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_removeBackedAmount\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_synthetic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_removeAmount\",\"type\":\"uint256\"}],\"name\":\"removeLowerCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_syntheticAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_pairs\",\"type\":\"string\"}],\"name\":\"setAddressToPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairs\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_syntheticAddress\",\"type\":\"address\"}],\"name\":\"setPairsToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pairs\",\"type\":\"string\"},{\"internalType\":\"string[2]\",\"name\":\"baseAndQuote\",\"type\":\"string[2]\"}],\"name\":\"setPairsToQuote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systheticAsset\",\"outputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"_synthetic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"viewRewardFromLiquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Synthetic.sol\":\"Synthetic\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IStdReference.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IStdReference {\\n    /// A structure returned whenever someone requests for standard reference data.\\n    struct ReferenceData {\\n        uint256 rate; // base/quote exchange rate, multiplied by 1e18.\\n        uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\\n        uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\\n    }\\n\\n    /// Returns the price data for the given base/quote pair. Revert if not available.\\n    function getReferenceData(string memory _base, string memory _quote)\\n        external\\n        view\\n        returns (ReferenceData memory);\\n\\n    /// Similar to getReferenceData, but with multiple base/quote pairs at once.\\n    function getReferenceDataBulk(\\n        string[] memory _bases,\\n        string[] memory _quotes\\n    ) external view returns (ReferenceData[] memory);\\n}\\n\",\"keccak256\":\"0x10d9e0f01bfa68a499e914366ffa7856a98f87ed6fc12ad29c7b25a33cf9f515\",\"license\":\"MIT\"},\"contracts/Synthetic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"./token/ERC20/IERC20.sol\\\";\\nimport \\\"./access/Ownable.sol\\\";\\nimport \\\"./utils/Pausable.sol\\\";\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./IStdReference.sol\\\";\\nimport \\\"./math/SafeMath.sol\\\";\\n\\n// @dev use this interface for burning systhetic asset.\\n// @notic burnFrom() need to call approve() before call this function.\\ninterface IERC20Burnable is IERC20 {\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function mint(address account, uint256 amount) external;\\n}\\n\\n// @info Synthetic contract is the contract that minting systhetic asset by given amount of collateral\\n// Minter can mint, redeem (some or all all them), add more collateral (to avoid liquidation),\\n// remove some collateral (to withdraw the backed asset). If the ratio between collateral and synthetic value\\n// goes lower than liquidation ratio, anyone can call the liquidate function to get the reward and close that contract.\\n//\\n// @requirements:\\n// - Contract address of Dolly (constuctor parameter).\\n// - Contract address of referrence of orale Band protocol (constuctor parameter).\\n// - Contract address of synthetic token contract (e.g. TSLA).\\n// - Set the ownership of synthetic token contract (e.g. TSLA) to this contract.\\n// - Set the pairsToQuote of supported synthetic asset (e.g. pairsToQuote[\\\"TSLA/USD\\\"] = [\\\"TSLA\\\", \\\"USD\\\"]).\\n// - Set the pairsToAddress of supported synthetic asset (e.g. pairsToAddress[\\\"TSLA/USD\\\"] = 0x65cAC0F09EFdB88195a002E8DD4CBF6Ec9BC7f60).\\n// - Set the addressToPairs of supported synthetic asset (e.g.) addressToPairs[0x65cAC0F09EFdB88195a002E8DD4CBF6Ec9BC7f60] = \\\"TSLA/USD\\\".\\n\\ncontract Synthetic is Ownable, Pausable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    IERC20Burnable public systheticAsset;\\n    IERC20 public dolly;\\n    IStdReference public bandOracle;\\n\\n    mapping(string => string[2]) public pairsToQuote;\\n    mapping(string => address) public pairsToAddress;\\n    mapping(address => string) public addressToPairs;\\n\\n    uint256 public denominator = 1e18; // 1 scaled by 1e18\\n    uint256 public collateralRatio = 1e18 + 5e17; // 1.5 scaled by 1e18 (> 1.5 is good)\\n    uint256 public liquidationRatio = 1e18 + 25e16; // 1.25 scaled by 1e18\\n\\n    // allocation of liquidating gap between closing contract and remainning backedAsset\\n    uint256 public liquidatorRewardRatio = 5e16; // 0.05 scaled by 1e18\\n    uint256 public platfromFeeRatio = 5e16; // 0.05 scaled by 1e18\\n    uint256 public remainingToMinterRatio = 9e17; // 0.9 scaled by 1e18\\n    address public devAddress; // dev address to collect liquidation fee\\n\\n    // struct of minting the synthetic asset\\n    struct MintingNote {\\n        address minter; // address of minter\\n        IERC20Burnable asset; // synthetic asset address\\n        IERC20 assetBacked; // dolly address\\n        uint256 assetAmount; // amount of synthetic asset to be minted\\n        uint256 assetBackedAmount; // amount of Dolly\\n        uint256 currentRatio; // the current ratio between collateral value and minted systhetic value\\n        uint256 willLiquidateAtPrice; // the price that will liquidate this contract\\n        uint256 canMintRemainning; // amount of this synthetic asset that can be minted\\n        uint256 canWithdrawRemainning; // amount of Dolly that can be withdraw\\n        uint256 updatedAt;\\n        uint256 updatedBlock;\\n        uint256 exchangeRateAtMinted; // exchange rate at minted\\n        uint256 currentExchangeRate; // last exchage rate\\n    }\\n\\n    mapping(address => mapping(address => MintingNote)) public contracts; // minter => asset => MintingNote\\n\\n    event MintAsset(\\n        address minter,\\n        address indexed syntheticAddress,\\n        uint256 amount\\n    );\\n    event RedeemAsset(address indexed syntheticAddress, uint256 amount);\\n    event AddCollateral(address indexed user, uint256 amount);\\n    event RemoveCollateral(address indexed user, uint256 amount);\\n    event Liquidated(\\n        address indexed liquidated,\\n        address indexed liquidator,\\n        address indexed syntheticAddress,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    event SetDevAddress(address oldDevAddress, address newDevAddress);\\n\\n    // @dev the constructor requires an address of Dolly and referrence of oracle Band Protocol\\n    constructor(IERC20 _dolly, IStdReference _ref) public {\\n        dolly = _dolly; // use Dolly as collateral\\n        bandOracle = _ref;\\n        devAddress = _msgSender();\\n    }\\n\\n    // user need to approve for deducting $DOLLY at Dolly contract first.\\n    function mintSynthetic(\\n        IERC20Burnable _synthetic,\\n        uint256 _amount, // amount of synthetic that want to mint\\n        uint256 _backedAmount // amount of Dolly that you want to collateral\\n    ) external whenNotPaused nonReentrant {\\n        MintingNote storage mn = contracts[_msgSender()][address(_synthetic)];\\n        require(\\n            mn.minter == address(0),\\n            \\\"Synthetic::mintSynthetic: transfer to address(0)\\\"\\n        );\\n\\n        uint256 exchangeRate = getRate(addressToPairs[address(_synthetic)]);\\n        uint256 assetBackedAtRateAmount =\\n            (_amount.mul(exchangeRate)).div(denominator); // 606872500000000000000\\n        uint256 requiredAmount =\\n            (assetBackedAtRateAmount.mul(collateralRatio)).div(denominator);\\n        require(\\n            _backedAmount >= requiredAmount,\\n            \\\"Synthetic::mintSynthetic: under collateral\\\"\\n        );\\n        uint256 canWithdrawRemainning = _backedAmount.sub(requiredAmount);\\n        _synthetic.mint(_msgSender(), _amount);\\n\\n        require(dolly.transferFrom(_msgSender(), address(this), _backedAmount));\\n        mn.minter = _msgSender();\\n        mn.asset = _synthetic;\\n        mn.assetBacked = dolly;\\n        mn.assetAmount = _amount;\\n        mn.assetBackedAmount = _backedAmount;\\n        mn.exchangeRateAtMinted = exchangeRate;\\n        mn.currentExchangeRate = exchangeRate;\\n        mn.currentRatio = getCurrentRatio(\\n            _backedAmount,\\n            assetBackedAtRateAmount\\n        );\\n        mn.willLiquidateAtPrice = getWillLiquidateAtPrice(\\n            exchangeRate,\\n            mn.currentRatio\\n        );\\n        mn.canWithdrawRemainning = canWithdrawRemainning;\\n        mn.canMintRemainning = getCanMintRemainning(\\n            canWithdrawRemainning,\\n            assetBackedAtRateAmount\\n        );\\n        mn.updatedAt = block.timestamp;\\n        mn.updatedBlock = block.number;\\n        emit MintAsset(_msgSender(), address(_synthetic), _amount);\\n    }\\n\\n    // @dev minter needs to approve for burn at SyntheticAsset before call this function.\\n    // @notice no need to redeem entire colateral amount.\\n    function redeemSynthetic(IERC20Burnable _synthetic, uint256 _amount)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        MintingNote storage mn = contracts[_msgSender()][address(_synthetic)];\\n        require(\\n            mn.assetAmount >= _amount,\\n            \\\"Synthetic::redeemSynthetic: amount exceeds collateral\\\"\\n        );\\n\\n        if (_amount == mn.assetAmount) {\\n            // redeem and exit\\n            _synthetic.burnFrom(_msgSender(), _amount);\\n            dolly.transfer(_msgSender(), mn.assetBackedAmount);\\n            delete contracts[_msgSender()][address(_synthetic)];\\n            emit RedeemAsset(address(_synthetic), _amount);\\n        } else {\\n            // patial redeeming\\n            uint256 percent = getRedeemPercent(_amount, mn.assetAmount);\\n            uint256 assetToBeBurned = (mn.assetAmount * percent) / denominator;\\n            uint256 assetBackedToBeRedeemed =\\n                (mn.assetBackedAmount * percent) / denominator;\\n\\n            uint256 exchangeRate = getRate(addressToPairs[address(_synthetic)]);\\n            uint256 assetBackedAmountAfterRedeem =\\n                mn.assetBackedAmount.sub(assetBackedToBeRedeemed);\\n\\n            uint256 assetRemainningAfterBurned =\\n                mn.assetAmount.sub(assetToBeBurned);\\n            uint256 assetBackedAtRateAmount =\\n                (assetRemainningAfterBurned.mul(exchangeRate)).div(denominator);\\n\\n            uint256 requiredAmount =\\n                (assetBackedAtRateAmount.mul(collateralRatio)).div(denominator);\\n            require(\\n                assetBackedAmountAfterRedeem >= requiredAmount,\\n                \\\"Synthetic::redeemSynthetic: under collateral ratio\\\"\\n            );\\n            uint256 canWithdrawRemainning =\\n                assetBackedAmountAfterRedeem.sub(requiredAmount);\\n\\n            _synthetic.burnFrom(_msgSender(), assetToBeBurned);\\n            dolly.transfer(_msgSender(), assetBackedToBeRedeemed);\\n\\n            mn.assetAmount = assetRemainningAfterBurned;\\n            mn.assetBackedAmount = assetBackedAmountAfterRedeem;\\n            mn.currentRatio = getCurrentRatio(\\n                mn.assetBackedAmount,\\n                assetBackedAtRateAmount\\n            );\\n            mn.willLiquidateAtPrice = getWillLiquidateAtPrice(\\n                exchangeRate,\\n                mn.currentRatio\\n            );\\n            mn.canWithdrawRemainning = canWithdrawRemainning;\\n            mn.canMintRemainning = getCanMintRemainning(\\n                canWithdrawRemainning,\\n                assetBackedAtRateAmount\\n            );\\n            mn.currentExchangeRate = exchangeRate;\\n            mn.updatedAt = block.timestamp;\\n            mn.updatedBlock = block.number;\\n            emit RedeemAsset(address(_synthetic), _amount);\\n        }\\n    }\\n\\n    // @info add more collateral for minted contract\\n    // @param _synthetic: the address of synthetic asset\\n    // @param _addAmount: amount of Dolly which want to add\\n    function addCollateral(IERC20Burnable _synthetic, uint256 _addAmount)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        MintingNote storage mn = contracts[_msgSender()][address(_synthetic)];\\n        require(\\n            mn.assetAmount > 0,\\n            \\\"Synthetic::addCollateral: cannot add collateral to empty contract\\\"\\n        );\\n        mn.assetBackedAmount = mn.assetBackedAmount.add(_addAmount);\\n\\n        uint256 exchangeRate = getRate(addressToPairs[address(_synthetic)]);\\n        uint256 assetBackedAtRateAmount =\\n            (mn.assetAmount.mul(exchangeRate)).div(denominator);\\n        uint256 requiredAmount =\\n            (assetBackedAtRateAmount.mul(collateralRatio)).div(denominator);\\n\\n        uint256 canWithdrawRemainning =\\n            mn.assetBackedAmount.sub(requiredAmount);\\n        require(dolly.transferFrom(_msgSender(), address(this), _addAmount));\\n        mn.currentRatio = getCurrentRatio(\\n            mn.assetBackedAmount,\\n            assetBackedAtRateAmount\\n        );\\n        mn.willLiquidateAtPrice = getWillLiquidateAtPrice(\\n            exchangeRate,\\n            mn.currentRatio\\n        );\\n        mn.canWithdrawRemainning = canWithdrawRemainning;\\n        mn.canMintRemainning = getCanMintRemainning(\\n            canWithdrawRemainning,\\n            assetBackedAtRateAmount\\n        );\\n        mn.currentExchangeRate = exchangeRate;\\n        mn.updatedAt = block.timestamp;\\n        mn.updatedBlock = block.number;\\n        emit AddCollateral(_msgSender(), _addAmount);\\n    }\\n\\n    // @info remove some collateral for minted contract\\n    // @param _synthetic: the address of synthetic asset\\n    // @param _removeBackedAmount: amount of collateral which want to remove\\n    function removeCollateral(\\n        IERC20Burnable _synthetic,\\n        uint256 _removeBackedAmount\\n    ) external whenNotPaused nonReentrant {\\n        MintingNote storage mn = contracts[_msgSender()][address(_synthetic)];\\n        require(\\n            mn.assetAmount > 0,\\n            \\\"Synthetic::removeCollateral: cannot remove collateral to empty contract\\\"\\n        );\\n        mn.assetBackedAmount = mn.assetBackedAmount.sub(_removeBackedAmount);\\n        require(\\n            mn.canWithdrawRemainning >= _removeBackedAmount,\\n            \\\"Synthetic::removeCollateral: amount exceeds required collateral\\\"\\n        );\\n        uint256 exchangeRate = getRate(addressToPairs[address(_synthetic)]);\\n        uint256 assetBackedAtRateAmount =\\n            (mn.assetAmount.mul(exchangeRate)).div(denominator);\\n        uint256 requiredAmount =\\n            (assetBackedAtRateAmount.mul(collateralRatio)).div(denominator);\\n\\n        uint256 canWithdrawRemainning =\\n            mn.assetBackedAmount.sub(requiredAmount);\\n        require(\\n            canWithdrawRemainning >= 0,\\n            \\\"Synthetic::removeCollateral: canWithdrawRemainning less than zero\\\"\\n        );\\n        dolly.transfer(_msgSender(), _removeBackedAmount);\\n        mn.currentRatio = getCurrentRatio(\\n            mn.assetBackedAmount,\\n            assetBackedAtRateAmount\\n        );\\n        mn.willLiquidateAtPrice = getWillLiquidateAtPrice(\\n            exchangeRate,\\n            mn.currentRatio\\n        );\\n        mn.canWithdrawRemainning = canWithdrawRemainning;\\n        mn.canMintRemainning = getCanMintRemainning(\\n            canWithdrawRemainning,\\n            assetBackedAtRateAmount\\n        );\\n        mn.currentExchangeRate = exchangeRate;\\n        mn.updatedAt = block.timestamp;\\n        mn.updatedBlock = block.number;\\n        emit RemoveCollateral(_msgSender(), _removeBackedAmount);\\n    }\\n\\n    // @dev for testing purpose.\\n    // @notice this function will remove some collateral to simulate under collateral and need to be liquidated in the future.\\n    // @param _synthetic: the address of synthetic asset.\\n    // @param _removeAmount: amount of collateral which want to remove.\\n    function removeLowerCollateral(\\n        IERC20Burnable _synthetic,\\n        uint256 _removeAmount\\n    ) external onlyOwner whenNotPaused nonReentrant {\\n        MintingNote storage mn = contracts[_msgSender()][address(_synthetic)];\\n        require(\\n            mn.assetAmount > 0,\\n            \\\"Synthetic::removeCollateral: cannot remove collateral to empty contract\\\"\\n        );\\n        mn.assetBackedAmount = mn.assetBackedAmount.sub(_removeAmount);\\n        uint256 exchangeRate = getRate(addressToPairs[address(_synthetic)]);\\n        uint256 assetBackedAtRateAmount =\\n            (mn.assetAmount.mul(exchangeRate)).div(denominator);\\n        dolly.transfer(_msgSender(), _removeAmount);\\n        mn.currentRatio = getCurrentRatio(\\n            mn.assetBackedAmount,\\n            assetBackedAtRateAmount\\n        );\\n        mn.willLiquidateAtPrice = getWillLiquidateAtPrice(\\n            exchangeRate,\\n            mn.currentRatio\\n        );\\n        mn.canWithdrawRemainning = 0;\\n        mn.canMintRemainning = 0;\\n        mn.currentExchangeRate = exchangeRate;\\n        mn.updatedAt = block.timestamp;\\n        mn.updatedBlock = block.number;\\n        emit RemoveCollateral(_msgSender(), _removeAmount);\\n    }\\n\\n    // @dev liquidator must approve Synthetic asset to spending Dolly\\n    // @param _synthetic: the address of synthetic asset.\\n    // @param _minter: address of minter.\\n    function liquidate(IERC20Burnable _synthetic, address _minter)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        MintingNote storage mn = contracts[_minter][address(_synthetic)];\\n        require(\\n            mn.minter != address(0),\\n            \\\"Synthetic::liquidate: empty contract\\\"\\n        );\\n\\n        // if less than 1.25, will be liquidated\\n        require(\\n            mn.currentRatio < liquidationRatio,\\n            \\\"Synthetic::liquidate: ratio is sastisfy\\\"\\n        );\\n        uint256 exchangeRate = getRate(addressToPairs[address(_synthetic)]);\\n        require(\\n            mn.willLiquidateAtPrice < exchangeRate,\\n            \\\"Synthetic::liquidate: asset price is sastisfy\\\"\\n        );\\n\\n        uint256 assetBackedAtRateAmount =\\n            (mn.assetAmount.mul(exchangeRate)).div(denominator);\\n\\n        uint256 remainingGapAmount =\\n            mn.assetBackedAmount.sub(assetBackedAtRateAmount);\\n\\n        uint256 minterReceiveAmount =\\n            (remainingGapAmount.mul(remainingToMinterRatio)).div(denominator);\\n\\n        uint256 liquidatorReceiveAmount =\\n            (remainingGapAmount.mul(liquidatorRewardRatio)).div(denominator);\\n\\n        uint256 platformReceiveAmount =\\n            (remainingGapAmount.mul(platfromFeeRatio)).div(denominator);\\n\\n        dolly.transferFrom(\\n            _msgSender(),\\n            address(this),\\n            assetBackedAtRateAmount\\n        ); // deduct Doly from liquidator\\n        dolly.transfer(mn.minter, minterReceiveAmount); // transfer remainning to minter (90%)\\n        dolly.transfer(_msgSender(), liquidatorReceiveAmount); // transfer reward to to liquidator (5%)\\n        dolly.transfer(devAddress, platformReceiveAmount); // transfer liquidating fee to dev address (5%)\\n\\n        delete contracts[_minter][address(_synthetic)];\\n    }\\n\\n    // @info set the pairs and quotes to calling the oracle\\n    // @param _pairs: string of pairs e.g. \\\"TSLA/USD\\\".\\n    // @param baseAndQuote: 2 elements array e.g. [\\\"TSLA\\\"][\\\"USD\\\"].\\n    function setPairsToQuote(\\n        string memory _pairs,\\n        string[2] memory baseAndQuote\\n    ) external onlyOwner {\\n        pairsToQuote[_pairs] = baseAndQuote;\\n    }\\n\\n    // @info use this function to get the synthetic token address by given string pairs\\n    // @param _pairs: string of pairs e.g. \\\"TSLA/USD\\\".\\n    // @param _syntheticAddress: address of synthetic asset.\\n    function setPairsToAddress(string memory _pairs, address _syntheticAddress)\\n        external\\n        onlyOwner\\n    {\\n        pairsToAddress[_pairs] = _syntheticAddress;\\n    }\\n\\n    // @info map synthetic token address to string of pairs. Used for getRate() function\\n    // @param _pairs: string of pairs e.g. \\\"TSLA/USD\\\".\\n    // @param _syntheticAddress: address of synthetic asset.\\n    function setAddressToPairs(address _syntheticAddress, string memory _pairs)\\n        external\\n        onlyOwner\\n    {\\n        addressToPairs[_syntheticAddress] = _pairs;\\n    }\\n\\n    // @info set dev address to receive liquidation fee.\\n    // @param _devAddress: new developer address.\\n    function setDevAddress(address _devAddress) external onlyOwner {\\n        address oldDevAddress = devAddress;\\n        devAddress = _devAddress;\\n        emit SetDevAddress(oldDevAddress, _devAddress);\\n    }\\n\\n    // @dev for simulate all relevant amount of liqiodation\\n    // @notice liquidate bot can call this function to estimate the profit.\\n    // @param _synthetic: a contract address of synthetic asset.\\n    // @param _minter: an address of minter.\\n    function viewRewardFromLiquidate(IERC20Burnable _synthetic, address _minter)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        MintingNote storage mn = contracts[_minter][address(_synthetic)];\\n        require(\\n            mn.minter != address(0),\\n            \\\"Synthetic::liquidate: empty contract\\\"\\n        );\\n\\n        // if less than 1.25, will be liquidated\\n        require(\\n            mn.currentRatio < liquidationRatio,\\n            \\\"Synthetic::liquidate: ratio is sastisfy\\\"\\n        );\\n        uint256 exchangeRate = getRate(addressToPairs[address(_synthetic)]);\\n        require(\\n            mn.willLiquidateAtPrice < exchangeRate,\\n            \\\"Synthetic::liquidate: asset price is sastisfy\\\"\\n        );\\n\\n        uint256 assetBackedAtRateAmount =\\n            (mn.assetAmount.mul(exchangeRate)).div(denominator);\\n\\n        uint256 remainingGapAmount =\\n            mn.assetBackedAmount.sub(assetBackedAtRateAmount);\\n\\n        uint256 minterReceiveAmount =\\n            (remainingGapAmount.mul(remainingToMinterRatio)).div(denominator);\\n\\n        uint256 liquidatorReceiveAmount =\\n            (remainingGapAmount.mul(liquidatorRewardRatio)).div(denominator);\\n\\n        uint256 platformReceiveAmount =\\n            (remainingGapAmount.mul(platfromFeeRatio)).div(denominator);\\n\\n        return (\\n            assetBackedAtRateAmount,\\n            remainingGapAmount,\\n            minterReceiveAmount,\\n            liquidatorReceiveAmount,\\n            platformReceiveAmount\\n        );\\n    }\\n\\n    // @dev for pause this smart contract to prevent mint, redeem, add collateral, remove collateral, liquidate process.\\n    function pause() external whenNotPaused onlyOwner {\\n        _pause();\\n    }\\n\\n    // @dev for unpause this smart contract to allow mint, redeem, add collateral, remove collateral, liquidate process.\\n    function unpause() external whenPaused onlyOwner {\\n        _unpause();\\n    }\\n\\n    // @dev get current rate of given asset by Oracle\\n    // @param _pairs: the pairs of asset.\\n    function getRate(string memory _pairs) public view returns (uint256) {\\n        require(isSupported(_pairs));\\n        IStdReference.ReferenceData memory data =\\n            bandOracle.getReferenceData(\\n                pairsToQuote[_pairs][0],\\n                pairsToQuote[_pairs][1]\\n            );\\n        return data.rate;\\n    }\\n\\n    // @dev get current ratio between collateral and minted synthetic asset\\n    // @param _backedAmount: callateral value\\n    // @param _assetBackedAtRateAmount: the value of minted synthetic asset\\n    function getCurrentRatio(\\n        uint256 _backedAmount,\\n        uint256 _assetBackedAtRateAmount\\n    ) internal view returns (uint256) {\\n        return\\n            (\\n                ((_backedAmount.mul(denominator)).div(_assetBackedAtRateAmount))\\n                    .mul(denominator)\\n            )\\n                .div(denominator);\\n    }\\n\\n    // @dev get liquidate price at current ratio\\n    // @param exchangeRate: the current exchange rate\\n    // @param currentRatio: the current ratio\\n    function getWillLiquidateAtPrice(uint256 exchangeRate, uint256 currentRatio)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (exchangeRate.mul(currentRatio.sub(liquidationRatio - denominator)))\\n                .div(denominator);\\n    }\\n\\n    // @dev get the maximum amount of asset that can be minted depends on current collateral ratio.\\n    // @param canWithdrawRemainning: the amount of Dolly that can be withdrawed.\\n    // @param assetBackedAtRateAmount: the current value of minted synthetic asset.\\n    function getCanMintRemainning(\\n        uint256 canWithdrawRemainning,\\n        uint256 assetBackedAtRateAmount\\n    ) internal view returns (uint256) {\\n        return\\n            (\\n                (\\n                    (canWithdrawRemainning.mul(denominator)).div(\\n                        assetBackedAtRateAmount\\n                    )\\n                )\\n                    .mul(denominator)\\n            )\\n                .div(denominator);\\n    }\\n\\n    // @dev get the percent of redeeming.\\n    // @notice use this function for calculate partial redeeming.\\n    // @param _amount: the number of synthetic asset that want to redeem.\\n    // @param assetAmount: the number of minted synthetic asset.\\n    function getRedeemPercent(uint256 _amount, uint256 assetAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (((_amount.mul(denominator)).div(assetAmount)).mul(denominator))\\n                .div(denominator);\\n    }\\n\\n    // @dev using for get supported asset before do the operation.\\n    // @param _pairs: the string of pairs e.g. \\\"TSLA/USD\\\"\\n    function isSupported(string memory _pairs) public view returns (bool) {\\n        return pairsToQuote[_pairs].length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x380bad0230b777174183dc09f7f58fe046b12126ba5fd68678718507c47638b2\",\"license\":\"MIT\"},\"contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0x227616c4ac154f034691b9edb7fce08667cf059f0cd5a7a88064f791eb283c0c\",\"license\":\"MIT\"},\"contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x3aefc025791d973007a545b773c5669d1e0e520ea53883c6dc3789c9a7f0b791\",\"license\":\"MIT\"},\"contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x8e0302197c71b215fb117051ac0c0caf59cae89f00a9b835afadbbf07bf3a4b1\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf407d4288c4c8218d1f8f0ed37daca79f26875a84d88a9799cb5be9ee9642b61\",\"license\":\"MIT\"},\"contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x86a79b60265aabe55948a98c7d3e4ecac538d859d47898c823ae63730b6ef0d9\",\"license\":\"MIT\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x746da2d54f38744c15c5f4cb2d859d728560e7853139d54117a3260ff12e3a14\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c80638223c7701161011a578063b32ec546116100ad578063d0d41fe11161007c578063d0d41fe1146103c7578063e150f647146103da578063f2fde38b146103ed578063f3a014a214610400578063fcb589d514610413576101fb565b8063b32ec54614610386578063b4eae1cb14610399578063bad82690146103a1578063bf15c3e1146103b4576101fb565b80638da5cb5b116100e95780638da5cb5b1461035b578063956dcd1f1461036357806396ce07951461036b5780639a12944c14610373576101fb565b80638223c7701461031a5780638456cb591461032d57806386b9d81f14610335578063876467f814610348576101fb565b80635bcbdc96116101925780636d75b9ee116101615780636d75b9ee146102e45780636e1aa51b146102f7578063715018a6146102ff5780637bda6e2814610307576101fb565b80635bcbdc96146102a15780635c975abb146102b457806365c3ad00146102c95780636c0daed8146102d1576101fb565b80633ad10ef6116101ce5780633ad10ef6146102675780633f4ba83a1461026f5780633f97bc5b146102795780634e55b8a714610299576101fb565b8063095f1404146102005780630b87d86e1461021e57806314057fca146102335780631775765f1461025f575b600080fd5b610208610437565b6040516102159190613168565b60405180910390f35b61022661043d565b6040516102159190612b57565b6102466102413660046127ff565b61044c565b6040516102159d9c9b9a99989796959493929190612bc2565b6102086104cc565b6102266104d2565b6102776104e1565b005b61028c610287366004612a38565b61054d565b6040516102159190612c3b565b610208610604565b6102776102af366004612996565b61060a565b6102bc61066f565b6040516102159190612c30565b61020861067f565b6102086102df366004612916565b610685565b6102776102f23660046128b7565b610770565b610226610a8a565b610277610a99565b610277610315366004612951565b610b18565b610277610328366004612837565b610b91565b610277610bef565b6102776103433660046128a5565b610c51565b6102776103563660046128b7565b611106565b6102266113e9565b6102266113f8565b610208611407565b6102776103813660046128e2565b61140d565b6102776103943660046128b7565b61178d565b610208611d2c565b6102266103af366004612916565b611d32565b61028c6103c23660046127e3565b611d58565b6102776103d53660046127e3565b611dc0565b6102776103e83660046128b7565b611e54565b6102776103fb3660046127e3565b61211a565b6102bc61040e366004612916565b6121d0565b6104266104213660046128a5565b6121ed565b604051610215959493929190613171565b600b5481565b6003546001600160a01b031681565b600f602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0154600b8c0154600c909c01546001600160a01b039b8c169c9a8c169b9099169997989697959694959394929391929091908d565b600a5481565b600e546001600160a01b031681565b6104e961066f565b61050e5760405162461bcd60e51b815260040161050590612c9c565b60405180910390fd5b6105166123a6565b6000546001600160a01b039081169116146105435760405162461bcd60e51b815260040161050590612f4c565b61054b6123aa565b565b81516020818401810180516005825292820191850191909120919052816002811061057457fe5b01805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815294509192508301828280156105fc5780601f106105d1576101008083540402835291602001916105fc565b820191906000526020600020905b8154815290600101906020018083116105df57829003601f168201915b505050505081565b600d5481565b6106126123a6565b6000546001600160a01b0390811691161461063f5760405162461bcd60e51b815260040161050590612f4c565b806005836040516106509190612b3b565b90815260405190819003602001902061066a916002612616565b505050565b600054600160a01b900460ff1690565b600c5481565b6000610690826121d0565b61069957600080fd5b6106a1612666565b6004546040516001600160a01b03909116906365555bcc906005906106c7908790612b3b565b9081526040519081900360200190206000016005866040516106e99190612b3b565b9081526040519081900360200190206001016040518363ffffffff1660e01b8152600401610718929190612c6e565b60606040518083038186803b15801561073057600080fd5b505afa158015610744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107689190612a7b565b519392505050565b61077861066f565b156107955760405162461bcd60e51b815260040161050590612e45565b600260015414156107b85760405162461bcd60e51b815260040161050590613082565b60026001556000600f816107ca6123a6565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020905060008160030154116108335760405162461bcd60e51b815260040161050590612dde565b6004810154610842908361241b565b60048201556001600160a01b038316600090815260076020908152604080832080548251601f600260001961010060018616150201909316929092049182018590048502810185019093528083526108ef938301828280156108e55780601f106108ba576101008083540402835291602001916108e5565b820191906000526020600020905b8154815290600101906020018083116108c857829003601f168201915b5050505050610685565b9050600061091660085461091084866003015461244990919063ffffffff16565b90612483565b905060006109356008546109106009548561244990919063ffffffff16565b905060006109508286600401546124c590919063ffffffff16565b6003549091506001600160a01b03166323b872dd61096c6123a6565b30896040518463ffffffff1660e01b815260040161098c93929190612b6b565b602060405180830381600087803b1580156109a657600080fd5b505af11580156109ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109de9190612885565b6109e757600080fd5b6109f5856004015484612507565b60058601819055610a07908590612527565b600686015560088501819055610a1d8184612507565b6007860155600c850184905542600986015543600a860155610a3d6123a6565b6001600160a01b03167f2ac90482c3b6bea30a2c085cf093016bad7f970d91c5fd233e6b848d3e231dc387604051610a759190613168565b60405180910390a25050600180555050505050565b6002546001600160a01b031681565b610aa16123a6565b6000546001600160a01b03908116911614610ace5760405162461bcd60e51b815260040161050590612f4c565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b610b206123a6565b6000546001600160a01b03908116911614610b4d5760405162461bcd60e51b815260040161050590612f4c565b80600683604051610b5e9190612b3b565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555050565b610b996123a6565b6000546001600160a01b03908116911614610bc65760405162461bcd60e51b815260040161050590612f4c565b6001600160a01b0382166000908152600760209081526040909120825161066a92840190612687565b610bf761066f565b15610c145760405162461bcd60e51b815260040161050590612e45565b610c1c6123a6565b6000546001600160a01b03908116911614610c495760405162461bcd60e51b815260040161050590612f4c565b61054b612552565b610c5961066f565b15610c765760405162461bcd60e51b815260040161050590612e45565b60026001541415610c995760405162461bcd60e51b815260040161050590613082565b60026001556001600160a01b038082166000908152600f60209081526040808320868516845290915290208054909116610ce55760405162461bcd60e51b81526004016105059061303e565b600a54816005015410610d0a5760405162461bcd60e51b815260040161050590612e6f565b6001600160a01b038316600090815260076020908152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352610d7d938301828280156108e55780601f106108ba576101008083540402835291602001916108e5565b905080826006015410610da25760405162461bcd60e51b815260040161050590612cca565b6000610dc160085461091084866003015461244990919063ffffffff16565b90506000610ddc8285600401546124c590919063ffffffff16565b90506000610dfb600854610910600d548561244990919063ffffffff16565b90506000610e1a600854610910600b548661244990919063ffffffff16565b90506000610e39600854610910600c548761244990919063ffffffff16565b6003549091506001600160a01b03166323b872dd610e556123a6565b30886040518463ffffffff1660e01b8152600401610e7593929190612b6b565b602060405180830381600087803b158015610e8f57600080fd5b505af1158015610ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec79190612885565b50600354875460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92610efd929116908790600401612b8f565b602060405180830381600087803b158015610f1757600080fd5b505af1158015610f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4f9190612885565b506003546001600160a01b031663a9059cbb610f696123a6565b846040518363ffffffff1660e01b8152600401610f87929190612b8f565b602060405180830381600087803b158015610fa157600080fd5b505af1158015610fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd99190612885565b50600354600e5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92611010929116908590600401612b8f565b602060405180830381600087803b15801561102a57600080fd5b505af115801561103e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110629190612885565b5050506001600160a01b039586166000908152600f602090815260408083209990981682529790975250505091832080546001600160a01b03199081168255600180830180548316905560028301805490921690915560038201859055600482018590556005820185905560068201859055600782018590556008820185905560098201859055600a8201859055600b8201859055600c9091019390935550508055565b61110e61066f565b1561112b5760405162461bcd60e51b815260040161050590612e45565b6002600154141561114e5760405162461bcd60e51b815260040161050590613082565b60026001556000600f816111606123a6565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020905060008160030154116111c95760405162461bcd60e51b815260040161050590612f81565b60048101546111d890836124c5565b600482015560088101548211156112015760405162461bcd60e51b81526004016105059061310b565b6001600160a01b038316600090815260076020908152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352611274938301828280156108e55780601f106108ba576101008083540402835291602001916108e5565b9050600061129560085461091084866003015461244990919063ffffffff16565b905060006112b46008546109106009548561244990919063ffffffff16565b905060006112cf8286600401546124c590919063ffffffff16565b90506003546001600160a01b031663a9059cbb6112ea6123a6565b886040518363ffffffff1660e01b8152600401611308929190612b8f565b602060405180830381600087803b15801561132257600080fd5b505af1158015611336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135a9190612885565b50611369856004015484612507565b6005860181905561137b908590612527565b6006860155600885018190556113918184612507565b6007860155600c850184905542600986015543600a8601556113b16123a6565b6001600160a01b03167fe25410a4059619c9594dc6f022fe231b02aaea733f689e7ab0cd21b3d4d0eb5487604051610a759190613168565b6000546001600160a01b031690565b6004546001600160a01b031681565b60085481565b61141561066f565b156114325760405162461bcd60e51b815260040161050590612e45565b600260015414156114555760405162461bcd60e51b815260040161050590613082565b60026001556000600f816114676123a6565b6001600160a01b0390811682526020808301939093526040918201600090812088831682529093529120805490925016156114b45760405162461bcd60e51b815260040161050590612fee565b6001600160a01b038416600090815260076020908152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352611527938301828280156108e55780601f106108ba576101008083540402835291602001916108e5565b90506000611544600854610910848861244990919063ffffffff16565b905060006115636008546109106009548561244990919063ffffffff16565b9050808510156115855760405162461bcd60e51b815260040161050590612d94565b600061159186836124c5565b9050876001600160a01b03166340c10f196115aa6123a6565b896040518363ffffffff1660e01b81526004016115c8929190612b8f565b600060405180830381600087803b1580156115e257600080fd5b505af11580156115f6573d6000803e3d6000fd5b50506003546001600160a01b031691506323b872dd90506116156123a6565b30896040518463ffffffff1660e01b815260040161163593929190612b6b565b602060405180830381600087803b15801561164f57600080fd5b505af1158015611663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116879190612885565b61169057600080fd5b6116986123a6565b85546001600160a01b039182166001600160a01b03199182161787556001870180548b8416908316179055600380546002890180549093169316929092179055850187905560048501869055600b8501849055600c85018490556116fc8684612507565b6005860181905561170e908590612527565b6006860155600885018190556117248184612507565b600786015542600986015543600a8601556001600160a01b0388167fd7918d04fa8d2763da038d81b4ab65ea7b9eb8e5e3b199c548142ac304a8ad6f6117686123a6565b89604051611777929190612b8f565b60405180910390a2505060018055505050505050565b61179561066f565b156117b25760405162461bcd60e51b815260040161050590612e45565b600260015414156117d55760405162461bcd60e51b815260040161050590613082565b60026001556000600f816117e76123a6565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020905081816003015410156118505760405162461bcd60e51b815260040161050590612eb6565b8060030154821415611a3257826001600160a01b03166379cc67906118736123a6565b846040518363ffffffff1660e01b8152600401611891929190612b8f565b600060405180830381600087803b1580156118ab57600080fd5b505af11580156118bf573d6000803e3d6000fd5b50506003546001600160a01b0316915063a9059cbb90506118de6123a6565b83600401546040518363ffffffff1660e01b8152600401611900929190612b8f565b602060405180830381600087803b15801561191a57600080fd5b505af115801561192e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119529190612885565b50600f600061195f6123a6565b6001600160a01b039081168252602080830193909352604091820160009081209187168082529190935281832080546001600160a01b0319908116825560018201805482169055600282018054909116905560038101849055600481018490556005810184905560068101849055600781018490556008810184905560098101849055600a8101849055600b8101849055600c0192909255517fb99b782c502642cbb60ce7d75f893727e5ef94003f2f9e56bcbbb013615e193e90611a25908590613168565b60405180910390a2611d23565b6000611a42838360030154612507565b905060006008548284600301540281611a5757fe5b04905060006008548385600401540281611a6d57fe5b6001600160a01b038816600090815260076020908152604080832080548251601f600260001961010060018616150201909316929092049182018590048502810185019093528083529590940495509193611ae993918301828280156108e55780601f106108ba576101008083540402835291602001916108e5565b90506000611b048387600401546124c590919063ffffffff16565b90506000611b1f8588600301546124c590919063ffffffff16565b90506000611b3c600854610910868561244990919063ffffffff16565b90506000611b5b6008546109106009548561244990919063ffffffff16565b905080841015611b7d5760405162461bcd60e51b8152600401610505906130b9565b6000611b8985836124c5565b90508b6001600160a01b03166379cc6790611ba26123a6565b8a6040518363ffffffff1660e01b8152600401611bc0929190612b8f565b600060405180830381600087803b158015611bda57600080fd5b505af1158015611bee573d6000803e3d6000fd5b50506003546001600160a01b0316915063a9059cbb9050611c0d6123a6565b896040518363ffffffff1660e01b8152600401611c2b929190612b8f565b602060405180830381600087803b158015611c4557600080fd5b505af1158015611c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d9190612885565b5060038a0184905560048a01859055611c968584612507565b60058b01819055611ca8908790612527565b60068b015560088a01819055611cbe8184612507565b60078b0155600c8a018690554260098b015543600a8b01556040516001600160a01b038d16907fb99b782c502642cbb60ce7d75f893727e5ef94003f2f9e56bcbbb013615e193e90611d11908e90613168565b60405180910390a25050505050505050505b50506001805550565b60095481565b80516020818301810180516006825292820191909301209152546001600160a01b031681565b60076020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156105fc5780601f106105d1576101008083540402835291602001916105fc565b611dc86123a6565b6000546001600160a01b03908116911614611df55760405162461bcd60e51b815260040161050590612f4c565b600e80546001600160a01b038381166001600160a01b03198316179092556040519116907f618c54559e94f1499a808aad71ee8729f8e74e8c48e979616328ce493a1a52e790611e489083908590612ba8565b60405180910390a15050565b611e5c6123a6565b6000546001600160a01b03908116911614611e895760405162461bcd60e51b815260040161050590612f4c565b611e9161066f565b15611eae5760405162461bcd60e51b815260040161050590612e45565b60026001541415611ed15760405162461bcd60e51b815260040161050590613082565b60026001556000600f81611ee36123a6565b6001600160a01b03166001600160a01b031681526020019081526020016000206000846001600160a01b03166001600160a01b0316815260200190815260200160002090506000816003015411611f4c5760405162461bcd60e51b815260040161050590612f81565b6004810154611f5b90836124c5565b60048201556001600160a01b038316600090815260076020908152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352611fd3938301828280156108e55780601f106108ba576101008083540402835291602001916108e5565b90506000611ff460085461091084866003015461244990919063ffffffff16565b6003549091506001600160a01b031663a9059cbb6120106123a6565b866040518363ffffffff1660e01b815260040161202e929190612b8f565b602060405180830381600087803b15801561204857600080fd5b505af115801561205c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120809190612885565b5061208f836004015482612507565b600584018190556120a1908390612527565b60068401556000600884018190556007840155600c830182905542600984015543600a8401556120cf6123a6565b6001600160a01b03167fe25410a4059619c9594dc6f022fe231b02aaea733f689e7ab0cd21b3d4d0eb54856040516121079190613168565b60405180910390a2505060018055505050565b6121226123a6565b6000546001600160a01b0390811691161461214f5760405162461bcd60e51b815260040161050590612f4c565b6001600160a01b0381166121755760405162461bcd60e51b815260040161050590612d17565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806005836040516121e39190612b3b565b5260021192915050565b6001600160a01b038082166000908152600f60209081526040808320868516845290915281208054919283928392839283921661223c5760405162461bcd60e51b81526004016105059061303e565b600a548160050154106122615760405162461bcd60e51b815260040161050590612e6f565b6001600160a01b038816600090815260076020908152604080832080548251601f600260001961010060018616150201909316929092049182018590048502810185019093528083526122d4938301828280156108e55780601f106108ba576101008083540402835291602001916108e5565b9050808260060154106122f95760405162461bcd60e51b815260040161050590612cca565b600061231860085461091084866003015461244990919063ffffffff16565b905060006123338285600401546124c590919063ffffffff16565b90506000612352600854610910600d548561244990919063ffffffff16565b90506000612371600854610910600b548661244990919063ffffffff16565b90506000612390600854610910600c548761244990919063ffffffff16565b949e939d50919b50995091975095505050505050565b3390565b6123b261066f565b6123ce5760405162461bcd60e51b815260040161050590612c9c565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6124046123a6565b6040516124119190612b57565b60405180910390a1565b6000828201838110156124405760405162461bcd60e51b815260040161050590612d5d565b90505b92915050565b60008261245857506000612443565b8282028284828161246557fe5b04146124405760405162461bcd60e51b815260040161050590612f0b565b600061244083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506125b3565b600061244083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506125ea565b600854600090612440906109108161252186838984612449565b90612449565b600061244060085461091061254b600854600a5403866124c590919063ffffffff16565b8690612449565b61255a61066f565b156125775760405162461bcd60e51b815260040161050590612e45565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124046123a6565b600081836125d45760405162461bcd60e51b81526004016105059190612c3b565b5060008385816125e057fe5b0495945050505050565b6000818484111561260e5760405162461bcd60e51b81526004016105059190612c3b565b505050900390565b8260028101928215612656579160200282015b828111156126565782518051612646918491602090910190612687565b5091602001919060010190612629565b50612662929150612701565b5090565b60405180606001604052806000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106126c857805160ff19168380011785556126f5565b828001600101855582156126f5579182015b828111156126f55782518255916020019190600101906126da565b5061266292915061271e565b808211156126625760006127158282612733565b50600101612701565b5b80821115612662576000815560010161271f565b50805460018160011615610100020316600290046000825580601f106127595750612777565b601f016020900490600052602060002090810190612777919061271e565b50565b600082601f83011261278a578081fd5b813567ffffffffffffffff8111156127a0578182fd5b6127b3601f8201601f1916602001613194565b91508082528360208285010111156127ca57600080fd5b8060208401602084013760009082016020015292915050565b6000602082840312156127f4578081fd5b8135612440816131f7565b60008060408385031215612811578081fd5b823561281c816131f7565b9150602083013561282c816131f7565b809150509250929050565b60008060408385031215612849578182fd5b8235612854816131f7565b9150602083013567ffffffffffffffff81111561286f578182fd5b61287b8582860161277a565b9150509250929050565b600060208284031215612896578081fd5b81518015158114612440578182fd5b60008060408385031215612811578182fd5b600080604083850312156128c9578182fd5b82356128d4816131f7565b946020939093013593505050565b6000806000606084860312156128f6578081fd5b8335612901816131f7565b95602085013595506040909401359392505050565b600060208284031215612927578081fd5b813567ffffffffffffffff81111561293d578182fd5b6129498482850161277a565b949350505050565b60008060408385031215612963578182fd5b823567ffffffffffffffff811115612979578283fd5b6129858582860161277a565b925050602083013561282c816131f7565b600080604083850312156129a8578182fd5b823567ffffffffffffffff808211156129bf578384fd5b6129cb8683870161277a565b93506020915081850135818111156129e1578384fd5b85019050601f810186136129f3578283fd5b6129fd6040613194565b8082855b6002811015612a2957612a178a8335870161277a565b84529285019290850190600101612a01565b50959890975095505050505050565b60008060408385031215612a4a578182fd5b823567ffffffffffffffff811115612a60578283fd5b612a6c8582860161277a565b95602094909401359450505050565b600060608284031215612a8c578081fd5b612a966060613194565b8251815260208301516020820152604083015160408201528091505092915050565b60008154600180821660008114612ad65760018114612af457612b32565b60028304607f16865260ff1983166020870152604086019350612b32565b60028304808752612b04866131bb565b60005b82811015612b285781546020828b0101528482019150602081019050612b07565b8801602001955050505b50505092915050565b60008251612b4d8184602087016131c7565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039d8e1681529b8d1660208d015299909b1660408b015260608a0197909752608089019590955260a088019390935260c087019190915260e08601526101008501526101208401526101408301526101608201929092526101808101919091526101a00190565b901515815260200190565b6000602082528251806020840152612c5a8160408501602087016131c7565b601f01601f19169190910160400192915050565b600060408252612c816040830185612ab8565b8281036020840152612c938185612ab8565b95945050505050565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252602d908201527f53796e7468657469633a3a6c69717569646174653a206173736574207072696360408201526c6520697320736173746973667960981b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602a908201527f53796e7468657469633a3a6d696e7453796e7468657469633a20756e6465722060408201526918dbdb1b185d195c985b60b21b606082015260800190565b60208082526041908201527f53796e7468657469633a3a616464436f6c6c61746572616c3a2063616e6e6f7460408201527f2061646420636f6c6c61746572616c20746f20656d70747920636f6e747261636060820152601d60fa1b608082015260a00190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526027908201527f53796e7468657469633a3a6c69717569646174653a20726174696f20697320736040820152666173746973667960c81b606082015260800190565b60208082526035908201527f53796e7468657469633a3a72656465656d53796e7468657469633a20616d6f756040820152741b9d08195e18d959591cc818dbdb1b185d195c985b605a1b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526047908201527f53796e7468657469633a3a72656d6f7665436f6c6c61746572616c3a2063616e60408201527f6e6f742072656d6f766520636f6c6c61746572616c20746f20656d70747920636060820152661bdb9d1c9858dd60ca1b608082015260a00190565b60208082526030908201527f53796e7468657469633a3a6d696e7453796e7468657469633a207472616e736660408201526f657220746f206164647265737328302960801b606082015260800190565b60208082526024908201527f53796e7468657469633a3a6c69717569646174653a20656d70747920636f6e746040820152631c9858dd60e21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526032908201527f53796e7468657469633a3a72656465656d53796e7468657469633a20756e64656040820152717220636f6c6c61746572616c20726174696f60701b606082015260800190565b6020808252603f908201527f53796e7468657469633a3a72656d6f7665436f6c6c61746572616c3a20616d6f60408201527f756e74206578636565647320726571756972656420636f6c6c61746572616c00606082015260800190565b90815260200190565b948552602085019390935260408401919091526060830152608082015260a00190565b60405181810167ffffffffffffffff811182821017156131b357600080fd5b604052919050565b60009081526020902090565b60005b838110156131e25781810151838201526020016131ca565b838111156131f1576000848401525b50505050565b6001600160a01b038116811461277757600080fdfea26469706673582212200da6ca41edea2062d92887a6840530ee525fba6280beb7d06660d430bb28efe264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1972,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3734,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3819,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 367,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "systheticAsset",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20Burnable)356"
      },
      {
        "astId": 369,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "dolly",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)3276"
      },
      {
        "astId": 371,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "bandOracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IStdReference)325"
      },
      {
        "astId": 377,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "pairsToQuote",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 381,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "pairsToAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 385,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "addressToPairs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 388,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "denominator",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 393,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "collateralRatio",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 398,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "liquidationRatio",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 401,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "liquidatorRewardRatio",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 404,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "platfromFeeRatio",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 407,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "remainingToMinterRatio",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 409,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "devAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 442,
        "contract": "contracts/Synthetic.sol:Synthetic",
        "label": "contracts",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(MintingNote)436_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)2_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3276": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Burnable)356": {
        "encoding": "inplace",
        "label": "contract IERC20Burnable",
        "numberOfBytes": "20"
      },
      "t_contract(IStdReference)325": {
        "encoding": "inplace",
        "label": "contract IStdReference",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(MintingNote)436_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct Synthetic.MintingNote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(MintingNote)436_storage)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(MintingNote)436_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Synthetic.MintingNote)",
        "numberOfBytes": "32",
        "value": "t_struct(MintingNote)436_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_string_storage)2_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)2_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MintingNote)436_storage": {
        "encoding": "inplace",
        "label": "struct Synthetic.MintingNote",
        "members": [
          {
            "astId": 411,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "minter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 413,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "asset",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20Burnable)356"
          },
          {
            "astId": 415,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "assetBacked",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)3276"
          },
          {
            "astId": 417,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "assetAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 419,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "assetBackedAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 421,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "currentRatio",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 423,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "willLiquidateAtPrice",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 425,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "canMintRemainning",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 427,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "canWithdrawRemainning",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 429,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "updatedAt",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 431,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "updatedBlock",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 433,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "exchangeRateAtMinted",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 435,
            "contract": "contracts/Synthetic.sol:Synthetic",
            "label": "currentExchangeRate",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}